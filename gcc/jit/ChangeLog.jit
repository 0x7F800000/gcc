2014-01-28  David Malcolm  <dmalcolm@redhat.com>

	* libgccjit.h (gcc_jit_context_new_child_context): New function.

	* libgccjit.map (gcc_jit_context_new_child_context): New function.

	* libgccjit.c (gcc_jit_context): Make the constructor explicit,
	with a parent context as a parameter.
	(gcc_jit_context_acquire): Create context with a NULL parent.
	(gcc_jit_context_new_child_context): New function, creating a
	context with the given parent.

	* internal-api.h (gcc::jit::recording::context::context): New
	explicit constructor, taking a parent context as a parameter.
	(gcc::jit::recording::context::m_parent_ctxt): New field.

	* internal-api.c (gcc::jit::recording::context::context): New
	explicit constructor, taking a parent context as a parameter.
	(gcc::jit::recording::context::replay_into): Replay parent contexts
	before replaying the context itself.

2014-01-27  David Malcolm  <dmalcolm@redhat.com>

	* internal-api.c (gcc::jit::playback::context::compile): Removal
	of the code-creation callback (96b218c9a1d5f39fb649e02c0e77586b180e8516)
	accidentally removed the implementation of
	GCC_JIT_BOOL_OPTION_DUMP_GENERATED_CODE; reinstate it.

2014-01-27  David Malcolm  <dmalcolm@redhat.com>

	* internal-api (gcc::jit::recording::context::new_call): Verify
	the argument count of the call against the parameter count of the
	function, issuing an error if there's a mismatch.

	* internal-api.h (gcc::jit::recording::function::get_name): New.
	* (gcc::jit::recording::function::get_params): New.
	* (gcc::jit::recording::function::is_variadic): New.

2014-01-27  David Malcolm  <dmalcolm@redhat.com>

	* libgccjit.h (enum gcc_jit_binary_op): Remove
	GCC_JIT_BINARY_OP_FLOATING_DIVIDE, which I accidentally added
	as part of a880c0d9c642730550f39d328f29a1d9935cb07e.

2014-01-24  David Malcolm  <dmalcolm@redhat.com>

	* libgccjit.h: Update comments to eliminate the code-creation
	callback.  All "contextual" objects change from merely being
	"alive" during the callback to having a lifetime equal to that
	of the context they are created within, with automatic cleanup
	when the context is released.
	(gcc_jit_code_callback): Delete.
	(gcc_jit_context_set_code_factory): Delete.

	* libgccjit.map (gcc_jit_context_set_code_factory): Delete.

	* dummy-frontend.c (my_walker): Update for rename of the singleton
	reference-owning context.
	(jit_langhook_parse_file): Rather than run a client-provided
	callback, we now replay a recording of the client activity.

	* internal-api.h (gcc::jit): Split the existing API into two
	copies...
	(gcc::jit::recording): ...a class hierarchy used to implement
	the client-facing API, which records the API calls made to it
	and...
	(gcc::jit::playback): ...a class hierarchy used within the
	dummy GCC frontend, which plays back the recorded API calls once
	GCC is initialized.

	* internal-api.c (gcc::jit::recording::playback_location): New
	API, in which client API calls are recorded as a list of "memento"
	objects, to be played back into GCC when the dummy frontend runs.
	(gcc::jit::recording::playback_string): Likewise.
	(gcc::jit::recording::playback_label): Likewise.
	(gcc::jit::recording::context::~context): Likewise.
	(gcc::jit::recording::context::replay_into): Likewise.
	(gcc::jit::recording::context::disassociate_from_playback): Likewise.
	(gcc::jit::recording::context::new_string): Likewise.
	(gcc::jit::recording::context::new_location): Likewise.
	(gcc::jit::recording::context::get_type): Likewise.
	(gcc::jit::recording::context::new_field): Likewise.
	(gcc::jit::recording::context::new_struct_type): Likewise.
	(gcc::jit::recording::context::new_param): Likewise.
	(gcc::jit::recording::context::new_function): Likewise.
	(gcc::jit::recording::context::new_global): Likewise.
	(gcc::jit::recording::context::new_rvalue_from_int): Likewise.
	(gcc::jit::recording::context::new_rvalue_from_double): Likewise.
	(gcc::jit::recording::context::new_rvalue_from_ptr): Likewise.
	(gcc::jit::recording::context::new_string_literal): Likewise.
	(gcc::jit::recording::context::new_unary_op): Likewise.
	(gcc::jit::recording::context::new_binary_op): Likewise.
	(gcc::jit::recording::context::new_comparison): Likewise.
	(gcc::jit::recording::context::new_call): Likewise.
	(gcc::jit::recording::context::new_array_lookup): Likewise.
	(gcc::jit::recording::string::string): Likewise.
	(gcc::jit::recording::string::~string): Likewise.
	(gcc::jit::recording::location::replay_into): Likewise.
	(gcc::jit::recording::type::get_pointer): Likewise.
	(gcc::jit::recording::type::get_const): Likewise.
	(gcc::jit::recording::memento_of_get_type::replay_into): Likewise.
	(gcc::jit::recording::memento_of_get_pointer::replay_into): Likewise.
	(gcc::jit::recording::memento_of_get_const::replay_into): Likewise.
	(gcc::jit::recording::field::replay_into): Likewise.
	(gcc::jit::recording::struct_::replay_into): Likewise.
	(gcc::jit::recording::rvalue::access_field): Likewise.
	(gcc::jit::recording::rvalue::dereference_field): Likewise.
	(gcc::jit::recording::rvalue::dereference): Likewise.
	(gcc::jit::recording::lvalue::access_field): Likewise.
	(gcc::jit::recording::lvalue::get_address): Likewise.
	(gcc::jit::recording::param::replay_into): Likewise.
	(gcc::jit::recording::function::function): Likewise.
	(gcc::jit::recording::function::replay_into): Likewise.
	(gcc::jit::recording::function::new_local): Likewise.
	(gcc::jit::recording::function::new_forward_label): Likewise.
	(gcc::jit::recording::function::add_eval): Likewise.
	(gcc::jit::recording::function::add_assignment): Likewise.
	(gcc::jit::recording::function::add_assignment_op): Likewise.
	(gcc::jit::recording::function::add_comment): Likewise.
	(gcc::jit::recording::function::add_conditional): Likewise.
	(gcc::jit::recording::function::add_label): Likewise.
	(gcc::jit::recording::function::place_forward_label): Likewise.
	(gcc::jit::recording::function::add_jump): Likewise.
	(gcc::jit::recording::function::add_return): Likewise.
	(gcc::jit::recording::function::new_loop): Likewise.
	(gcc::jit::recording::label::replay_into): Likewise.
	(gcc::jit::recording::global::replay_into): Likewise.
	(gcc::jit::recording::memento_of_new_rvalue_from_int::replay_into):
	Likewise.
	(gcc::jit::recording::memento_of_new_rvalue_from_double::replay_into):
	Likewise.
	(gcc::jit::recording::memento_of_new_rvalue_from_ptr::replay_into):
	Likewise.
	(gcc::jit::recording::memento_of_new_string_literal::replay_into):
	Likewise.
	(gcc::jit::recording::unary_op::replay_into): Likewise.
	(gcc::jit::recording::binary_op::replay_into): Likewise.
	(gcc::jit::recording::comparison::replay_into): Likewise.
	(gcc::jit::recording::call::call): Likewise.
	(gcc::jit::recording::call::replay_into): Likewise.
	(gcc::jit::recording::array_lookup::replay_into): Likewise.
	(gcc::jit::recording::access_field_of_lvalue::replay_into): Likewise.
	(gcc::jit::recording::access_field_rvalue::replay_into): Likewise.
	(gcc::jit::recording::dereference_field_rvalue::replay_into): Likewise.
	(gcc::jit::recording::dereference_rvalue::replay_into): Likewise.
	(gcc::jit::recording::get_address_of_lvalue::replay_into): Likewise.
	(gcc::jit::recording::local::replay_into): Likewise.
	(gcc::jit::recording::eval::replay_into): Likewise.
	(gcc::jit::recording::assignment::replay_into): Likewise.
	(gcc::jit::recording::assignment_op::replay_into): Likewise.
	(gcc::jit::recording::comment::replay_into): Likewise.
	(gcc::jit::recording::conditional::replay_into): Likewise.
	(gcc::jit::recording::place_label::replay_into): Likewise.
	(gcc::jit::recording::jump::replay_into): Likewise.
	(gcc::jit::recording::return_::replay_into): Likewise.
	(gcc::jit::recording::loop::replay_into): Likewise.
	(gcc::jit::recording::loop::end): Likewise.
	(gcc::jit::recording::loop_end::replay_into): Likewise.

	(gcc::jit::recording::context::set_str_option): Likewise.
	Option setting and error-handling is now "owned" by the recording
	context; the playback context delegates to the recording context
	for these aspects.
	(gcc::jit::recording::context::set_int_option): Likewise.
	(gcc::jit::recording::context::set_bool_option): Likewise.
	(gcc::jit::recording::context::compile): Likewise.
	(gcc::jit::recording::context::add_error): Likewise.
	(gcc::jit::recording::context::add_error_va): Likewise.
	(gcc::jit::recording::context::get_first_error): Likewise.

	(gcc::jit::context::context): Rename to...
	(gcc::jit::playback::context::context): ...this.
	(gcc::jit::context::~context): Rename to...
	(gcc::jit::playback::context::~context): ...this.
	(gcc::jit::context::gt_ggc_mx): Rename to...
	(gcc::jit::playback::context::gt_ggc_mx): ...this.

	(gcc::jit::context::set_code_factory): Eliminate.

	(gcc::jit::context::get_type): Rename to...
	(gcc::jit::playback::context::get_type): ...this.
	(gcc::jit::context::new_field): Rename to...
	(gcc::jit::playback::context::new_field): ...this.
	(gcc::jit::context::new_struct_type): Rename to...
	(gcc::jit::playback::context::new_struct_type): ...this, and
	update to require a vec<field *>.
	(gcc::jit::context::new_param): Rename to...
	(gcc::jit::playback::context::new_param): ...this.
	(gcc::jit::context::new_function): Rename to...
	(gcc::jit::playback::context::new_function): ...this, and update
	to require a vec<param *>.
	(gcc::jit::context::new_global): Rename to...
	(gcc::jit::playback::context::new_global): ...this.
	(gcc::jit::context::new_rvalue_from_int): Rename to...
	(gcc::jit::playback::context::new_rvalue_from_int): ...this.
	(gcc::jit::context::new_rvalue_from_double): Rename to...
	(gcc::jit::playback::context::new_rvalue_from_double): ...this.
	(gcc::jit::context::new_rvalue_from_ptr): Rename to...
	(gcc::jit::playback::context::new_rvalue_from_ptr): ...this.
	(gcc::jit::context::new_string_literal): Rename to...
	(gcc::jit::playback::context::new_string_literal): ...this.
	(gcc::jit::context::as_truth_value): Rename to...
	(gcc::jit::playback::context::as_truth_value): ...this.
	(gcc::jit::context::new_unary_op): Rename to...
	(gcc::jit::playback::context::new_unary_op): ...this.
	(gcc::jit::context::new_binary_op): Rename to...
	(gcc::jit::playback::context::new_binary_op): ...this.
	(gcc::jit::context::new_comparison): Rename to...
	(gcc::jit::playback::context::new_comparison): ...this.
	(gcc::jit::context::new_call): Rename to...
	(gcc::jit::playback::context::new_call): ...this, and update
	to require a vec<rvalue *>.
	(gcc::jit::context::new_array_lookup): Rename to...
	(gcc::jit::playback::context::new_array_lookup): ...this.
	(gcc::jit::context::new_field_access): Rename to...
	(gcc::jit::playback::context::new_field_access): ...this.
	(gcc::jit::context::new_dereference): Rename to...
	(gcc::jit::playback::context::new_dereference): ...this.

	(gcc::jit::lvalue::access_field): Rename to...
	(gcc::jit::playback::lvalue::access_field): ...this.
	(gcc::jit::lvalue::get_address): Rename to...
	(gcc::jit::playback::lvalue::get_address): ...this.

	(gcc::jit::rvalue::dereference_field): Rename to...
	(gcc::jit::playback::rvalue::dereference_field): ...this.

	(gcc::jit::rvalue::dereference): Rename to...
	(gcc::jit::playback::rvalue::dereference): ...this.

	(gcc::jit::wrapper::operator new): Rename to...
	(gcc::jit::playback::wrapper::operator new): ...this.

	(gcc::jit::function::function): Rename to...
	(gcc::jit::playback::function::function): ...this.
	(gcc::jit::function::gt_ggc_mx): Rename to...
	(gcc::jit::playback::function::gt_ggc_mx): ...this.
	(gcc::jit::function::get_return_type_as_tree): Rename to...
	(gcc::jit::playback::function::get_return_type_as_tree): ...this.
	(gcc::jit::function::new_local): Rename to...
	(gcc::jit::playback::function::new_local): ...this.
	(gcc::jit::function::new_forward_label): Rename to...
	(gcc::jit::playback::function::new_forward_label): ...this.
	(gcc::jit::function::postprocess): Rename to...
	(gcc::jit::playback::function::postprocess): ...this.
	(gcc::jit::function::add_eval): Rename to...
	(gcc::jit::playback::function::add_eval): ...this.
	(gcc::jit::function::add_assignment): Rename to...
	(gcc::jit::playback::function::add_assignment): ...this.
	(gcc::jit::function::add_comment): Rename to...
	(gcc::jit::playback::function::add_comment): ...this.
	(gcc::jit::function::add_conditional): Rename to...
	(gcc::jit::playback::function::add_conditional): ...this.
	(gcc::jit::function::add_label): Rename to...
	(gcc::jit::playback::function::add_label): ...this.
	(gcc::jit::function::place_forward_label): Rename to...
	(gcc::jit::playback::function::place_forward_label): ...this.
	(gcc::jit::function::add_jump): Rename to...
	(gcc::jit::playback::function::add_jump): ...this.
	(gcc::jit::function::add_return): Rename to...
	(gcc::jit::playback::function::add_return): ...this.
	(gcc::jit::function::new_loop): Rename to...
	(gcc::jit::playback::function::new_loop): ...this.

	(gcc::jit::label::label): Rename to...
	(gcc::jit::playback::label::label): ...this.

	(gcc::jit::loop::loop): Rename to...
	(gc::jit::playback::loop::loop): ...this.
	(gcc::jit::loop::end): Rename to...
	(gcc::jit::playback::loop): ...this.

	(gcc::jit::active_jit_ctxt): Eliminate in favor of...
	(gcc::jit::active_playback_ctxt): ...this.

	(gcc::jit::context::compile): Rename to...
	(gcc::jit::playback::context::compile): ...this, and eliminate the
	mutex handling; this is done for us by the caller.

	(gcc::jit::context::invoke_code_factory): Rename to...
	(gcc::jit::playback::context::replay): this.  Rather than call
	a client-provided callback, instead replay the recorded API
	calls.

	(gcc::jit::context::dump_generated_code): Rename to...
	(gcc::jit::playback::context::dump_generated_code): ...this.

	(location_comparator): Update for renamed types.

	(gcc::jit::context::handle_locations): Rename to...
	(gcc::jit::playback::context::handle_locations): ...this.

	(gcc::jit::context::add_error): Rename to...
	(gcc::jit::playback::context::add_error): this, and delegate to
	the recording context's add_error_va.

	(gcc::jit::context::add_error_va): Rename to...
	(gcc::jit::playback::context::add_error_va): this, and delegate
	to the recording context.

	(gcc::jit::context::new_location): Rename to...
	(gcc::jit::playback::context::new_location): ...this.
	(gcc::jit::context::set_tree_location): Rename to...
	(gcc::jit::playback::context::set_tree_location): ...this.
	(gcc::jit::context::get_source_file): Rename to...
	(gcc::jit::playback::context::get_source_file): ...this.
	(gcc::jit::source_file::source_file): Rename to...
	(gcc::jit::playback::source_file::source_file): ...this.
	(gcc::jit::source_file::get_source_line): Rename to...
	(gcc::jit::playback::source_file::get_source_line): ...this.
	(gcc::jit::source_line::source_line): Rename to...
	(gcc::jit::playback::source_line::source_line): ...this.
	(gcc::jit::source_line::get_location): Rename to...
	(gcc::jit::playback::source_line::get_location): ...this.

	(gcc::jit::location::location): Rename to...
	(gcc::jit::playback::location::location): ...this.

	* libgccjit.c: Update classes to derive from the "jit::recording"
	class hierarchy.
	(RETURN_IF_NOT_INITIAL_CTXT): Eliminate, as it relates to
	code-creation callbacks.
	(RETURN_NULL_IF_NOT_INITIAL_CTXT): Likewise.
	(RETURN_NULL_IF_NOT_CALLBACK_CTXT): Likewise.
	(jit_error): There isn't an "active jit context" anymore, except
	during actual compilation, so simplify the logic here.
	(gcc_jit_context_set_code_factory): Delete.

	(gcc_jit_context_new_location): Update preconditions now that we
	don't have code-creation callbacks.
	(gcc_jit_context_get_type): Likewise.
	(gcc_jit_type_get_pointer): Likewise.
	(gcc_jit_type_get_const): Likewise.
	(gcc_jit_context_new_field): Likewise.
	(gcc_jit_context_new_struct_type): Likewise.
	(gcc_jit_context_new_param): Likewise.
	(gcc_jit_param_as_lvalue): Likewise.
	(gcc_jit_param_as_rvalue): Likewise.
	(gcc_jit_context_new_function): Likewise.
	(gcc_jit_context_new_function): Likewise.
	(gcc_jit_function_new_forward_label): Likewise.
	(gcc_jit_context_new_global): Likewise.
	(gcc_jit_lvalue_as_rvalue): Likewise.
	(gcc_jit_context_new_rvalue_from_int): Likewise.
	(gcc_jit_context_zero): Likewise.
	(gcc_jit_context_one): Likewise.
	(gcc_jit_context_new_rvalue_from_double): Likewise.
	(gcc_jit_context_new_rvalue_from_ptr): Likewise.
	(gcc_jit_context_new_string_literal): Likewise.
	(gcc_jit_context_new_unary_op): Likewise.
	(gcc_jit_context_new_binary_op): Likewise.
	(gcc_jit_context_new_comparison): Likewise.
	(gcc_jit_context_new_call): Likewise.
	(gcc_jit_context_new_call): Likewise.
	(gcc_jit_context_new_array_lookup): Likewise.
	(gcc_jit_context_set_str_option): Likewise.
	(gcc_jit_context_set_int_option): Likewise.
	(gcc_jit_context_set_bool_option): Likewise.
	(gcc_jit_context_compile): Likewise.
	(gcc_jit_function_add_assignment_op): Likewise.  Also,
	reimplement as a separate kind of recording, since we can't know
	the type of the lvalue at recording-time.

	* notes.txt: Update diagram to reflect the new implementation.

2014-01-24  David Malcolm  <dmalcolm@redhat.com>

	* libgccjit.h (enum gcc_jit_binary_op): We will use the result
	type to determine if GCC_JIT_BINARY_OP_DIVIDE should
	truncate towards zero, or be floating-point division.

	* internal-api.c (gcc::jit::context::new_binary_op): Likewise.

2014-01-24  David Malcolm  <dmalcolm@redhat.com>

	* internal-api.h (gcc::jit::context::get_str_option): New access
	method.
	(gcc::jit::context::get_int_option): Likewise.

	* internal-api.c (gcc::jit::context::~context): Use access methods
	for options, rather than direct field access.
	(gcc::jit::context::compile): Likewise.

2014-01-23  David Malcolm  <dmalcolm@redhat.com>

	* libgccjit.h (enum gcc_jit_bool_option): New value:
	GCC_JIT_BOOL_OPTION_DUMP_GENERATED_CODE.

	* internal-api.c (gcc::jit::context::compile): Call
	dump_generated_code if the user has requested it.
	(gcc::jit::context::dump_generated_code): New, copying
	from the .s file to stderr.

	* internal-api.h (gcc::jit::context::dump_generated_code): New.

2014-01-23  David Malcolm  <dmalcolm@redhat.com>

	* internal-api.h (gcc::jit::function): Add field
	"m_inner_bind_expr".
	* internal-api.c (gcc::jit::function::function): Create a BIND_EXPR
	for all non-imported functions, and put the statement list within
	it.
	(gcc::jit::function::gt_ggc_mx): Visit m_inner_bind_expr.
	(gcc::jit::function::new_local): Set the DECL_CONTEXT of the new
	local to be the function's BIND_EXPR, and prepend the new local
	to said BIND_EXPR's BIND_EXPR_VARS chain.
	(gcc::jit::function::postprocess): Set the DECL_SAVED_TREE of the
	FUNCTION_DECL to be the BIND_EXPR, rather than the statement list.
	The latter is now contained within the former.

2014-01-23  David Malcolm  <dmalcolm@redhat.com>

	* internal-api.h (gcc::jit::function::add_stmt): New.

	* internal-api.c (gcc::jit::function::add_eval): Replace use of
	tsi_link_stmt with call to add_stmt.
	(gcc::jit::function::add_assignment): Likewise.
	(gcc::jit::function::add_conditional): Likewise.
	(gcc::jit::function::place_forward_label): Likewise.
	(gcc::jit::function::add_jump): Likewise.
	(gcc::jit::function::add_return): Likewise.

2014-01-21  David Malcolm  <dmalcolm@redhat.com>

	* internal-api.c (gcc::jit::function::add_comment): New.
	* internal-api.h (gcc::jit::function::add_comment): New.
	* libgccjit.c (gcc_jit_function_add_comment): New.
	* libgccjit.h (gcc_jit_function_add_comment): New.
	* libgccjit.map: Add gcc_jit_function_add_comment.

2013-10-24  David Malcolm  <dmalcolm@redhat.com>

	* internal-api.c (gcc::jit::function::add_eval): Handle non-NULL
	locations.
	(gcc::jit::context::handle_locations): Fix test for the various
	kinds of declarations, replacing use of DECL_MINIMAL_CHECK,
	which aborts on failure (such as if we saw a type).
	* libgccjit.h (GCC_JIT_BOOL_OPTION_DEBUGINFO): Fix out-of-date
	comment.

2013-10-23  David Malcolm  <dmalcolm@redhat.com>

	* internal-api.c: Update for rename of tree-flow.h to tree-cfg.h
	in r203320, for declaration of dump_function_to_file.
	* TODO.rst ("segfault seen in libbacktrace"): Remove - this was
	fixed by Ian in r203810.

2013-10-23  David Malcolm  <dmalcolm@redhat.com>

	* internal-api.c: Add missing include of diagnostic-core.h

2013-10-22  David Malcolm  <dmalcolm@redhat.com>

	* internal-api.c (gcc::jit::context::add_error_va): Record the
	first error that occurs on a context.
	(gcc::jit::context::get_first_error): New.
	* internal-api.h (gcc::jit::context::get_first_error): New.
	(gcc::jit::context::m_first_error_str): New.
	* libgccjit.c (gcc_jit_context_get_first_error): New.
	* libgccjit.h (gcc_jit_context_get_first_error): New.
	* libgccjit.map (gcc_jit_context_get_first_error): New.

2013-10-21  David Malcolm  <dmalcolm@redhat.com>

	* internal-api.c (gcc::jit::context::compile): Correctly cleanup
	timevars in error-handling, preventing an issue where an error
	on a context left timevar.c in an unstopped state, leading to an
	assertion failure when restarting timevars in the next compile.
	Found via fuzz-testing.

2013-10-21  David Malcolm  <dmalcolm@redhat.com>

	* internal-api.c (gcc::jit::context::postprocess): Show source
	line numbers (if any) in gimple dump.

2013-10-21  David Malcolm  <dmalcolm@redhat.com>

	* libgccjit.c (gcc_jit_function_new_local): Use a more clear
	error message for the case where someone tries to add a local
	to a function imported from elsewhere.

2013-10-21  David Malcolm  <dmalcolm@redhat.com>

	* TODO.rst ("the C unary prefix "&" operator"): Remove completed item.
	* internal-api.c (gcc::jit::lvalue::get_address): New.
	* internal-api.h (gcc::jit::lvalue::get_address): New.
	* libgccjit.c (gcc_jit_lvalue_get_address): New.
	* libgccjit.h (gcc_jit_lvalue_get_address): New.
	* libgccjit.map (gcc_jit_lvalue_get_address): New.

2013-10-18  David Malcolm  <dmalcolm@redhat.com>

	* internal-api.c (gcc::jit::context::new_param): Add context
	argument to ctor for rvalue and its subclasses.
	(gcc::jit::context::new_global): Likewise.
	(gcc::jit::context::new_rvalue_from_int): Likewise.
	(gcc::jit::context::new_rvalue_from_double): Likewise.
	(gcc::jit::context::new_rvalue_from_ptr): Likewise.
	(gcc::jit::context::new_string_literal): Likewise.
	(gcc::jit::context::new_call): Likewise.
	(gcc::jit::context::new_array_lookup): Likewise.
	(gcc::jit::function::new_local): Likewise.
	(gcc::jit::context::new_binary_op): Likewise; add new
	operations.
	(gcc::jit::context::new_comparison): Likewise; add new
	comparisons.
	(gcc::jit::context::as_truth_value): New.
	(gcc::jit::context::new_unary_op): New.
	(gcc::jit::context::new_field_access): Convert to a helper
	method for use by the access_fields methods.
	(gcc::jit::context::new_dereference): New.
	(gcc::jit::lvalue::access_field): New.
	(gcc::jit::rvalue::access_field): New.
	(gcc::jit::rvalue::dereference_field): New.
	(gcc::jit::rvalue::dereference): New.
	* internal-api.h (gcc::jit::context::new_unary_op): New.
	(gcc::jit::context::new_field_access): Work
	(gcc::jit::context::new_dereference): New.
	(gcc::jit::context::as_truth_value): New.
	(gcc::jit::rvalue): Add a context field.
	(gcc::jit::rvalue::access_field): New.
	(gcc::jit::rvalue::dereference_field): New.
	(gcc::jit::rvalue::dereference): New.
	(gcc::jit::lvalue::lvalue): Add context to ctor.
	(gcc::jit::lvalue::access_field): New.
	(gcc::jit::param::param): Add context to ctor.
	* libgccjit.c (gcc_jit_context_new_unary_op): New.
	(gcc_jit_context_new_field_access): Remove.
	(gcc_jit_lvalue_access_field): New.
	(gcc_jit_rvalue_access_field): New.
	(gcc_jit_rvalue_dereference_field): New.
	(gcc_jit_rvalue_dereference): New.
	*libgccjit.h (enum gcc_jit_unary_op): New.
	(gcc_jit_context_new_unary_op): New.
	(enum gcc_jit_binary_op): Document values, and add...
	(GCC_JIT_BINARY_OP_DIVIDE): New.
	(GCC_JIT_BINARY_OP_MODULO): New.
	(GCC_JIT_BINARY_OP_BITWISE_AND): New.
	(GCC_JIT_BINARY_OP_BITWISE_XOR): New.
	(GCC_JIT_BINARY_OP_BITWISE_OR): New.
	(GCC_JIT_BINARY_OP_LOGICAL_AND): New.
	(GCC_JIT_BINARY_OP_LOGICAL_OR): New.
	(enum gcc_jit_comparison): Document values, and add...
	(GCC_JIT_COMPARISON_EQ): New.
	(GCC_JIT_COMPARISON_NE): New.
	(GCC_JIT_COMPARISON_LE): New.
	(GCC_JIT_COMPARISON_GT): New.
	(GCC_JIT_COMPARISON_GE): New.
	(gcc_jit_context_new_field_access): Remove.
	(gcc_jit_lvalue_access_field): New.
	(gcc_jit_rvalue_access_field): New.
	(gcc_jit_rvalue_dereference_field): New.
	(gcc_jit_rvalue_dereference): New.
	* libgccjit.map (gcc_jit_context_new_field_access): Remove.
	(gcc_jit_lvalue_access_field): New.
	(gcc_jit_rvalue_access_field): New.
	(gcc_jit_rvalue_dereference_field): New.
	(gcc_jit_rvalue_dereference): New.
	* TODO.rst: Update

2013-10-18  David Malcolm  <dmalcolm@redhat.com>

	* internal-api.c (gcc::jit::context::get_type): Improve error
	message, and report the bogus value.
	(gcc::jit::context::new_binary_op): Likewise.
	(gcc::jit::context::new_comparison): Likewise.
	(gcc::jit::context::set_str_option): Likewise.
	(gcc::jit::context::set_int_option): Likewise.
	(gcc::jit::context::set_bool_option): Likewise.
	(gcc::jit::context::compile): Likewise, and make the errors
	block the creation of result, rather than just the return
	value of the client callback.
	(gcc::jit::context::add_error): Add varargs and provide
	implementation, calling into...
	(gcc::jit::context::add_error_va): New.
	* internal-api.h (GNU_PRINTF): New.
	(gcc::jit::context::add_error): Add varargs and GNU_PRINTF
	attribute macro.
	(gcc::jit::context::add_error_va): New.
	(gcc::jit::context::errors_occurred): New.
	(gcc::jit::context::m_error_count): New.
	(gcc::jit::function::get_kind): New.
	* libgccjit.c (JIT_BEGIN_STMT): New.
	(JIT_END_STMT): New.
	(RETURN_VAL_IF_FAIL): New.
	(RETURN_NULL_IF_FAIL): New.
	(RETURN_IF_FAIL): New.
	(RETURN_IF_NOT_INITIAL_CTXT): New.
	(RETURN_NULL_IF_NOT_INITIAL_CTXT): New.
	(RETURN_NULL_IF_NOT_CALLBACK_CTXT): New.
	(RETURN_IF_NOT_FUNC_DEFINITION): New.
	(RETURN_NULL_IF_NOT_FUNC_DEFINITION): New.
	(jit_error): New.
	(gcc_jit_context_set_code_factory): Use new error-checking
	macros.
	(ASSERT_WITHIN_CALLBACK): Remove.
	(ASSERT_NOT_WITHIN_CALLBACK): Remove.
	(gcc_jit_context_new_location): Use new error-checking macros.
	(gcc_jit_context_get_type): Likewise.
	(gcc_jit_type_get_pointer): Likewise.
	(gcc_jit_type_get_const): Likewise.
	(gcc_jit_context_new_field): Likewise.
	(gcc_jit_context_new_struct_type): Likewise.
	(gcc_jit_context_new_param): Likewise.
	(gcc_jit_param_as_lvalue): Likewise.
	(gcc_jit_param_as_rvalue): Likewise.
	(gcc_jit_context_new_function): Likewise.
	(gcc_jit_function_new_forward_label): Likewise.
	(gcc_jit_context_new_global): Likewise.
	(gcc_jit_lvalue_as_rvalue): Likewise.
	(gcc_jit_context_new_rvalue_from_int): Likewise.
	(gcc_jit_context_zero): Likewise.
	(gcc_jit_context_one): Likewise.
	(gcc_jit_context_new_rvalue_from_double): Likewise.
	(gcc_jit_context_new_rvalue_from_ptr): Likewise.
	(gcc_jit_context_new_string_literal): Likewise.
	(gcc_jit_context_new_binary_op): Likewise.
	(gcc_jit_context_new_comparison): Likewise.
	(gcc_jit_context_new_call): Likewise.
	(gcc_jit_context_new_array_lookup): Likewise.
	(gcc_jit_context_new_field_access): Likewise.
	(gcc_jit_function_new_local): Likewise.
	(gcc_jit_function_add_label): Likewise.
	(gcc_jit_function_place_forward_label): Likewise.
	(gcc_jit_function_add_eval): Likewise.
	(gcc_jit_function_add_assignment): Likewise.
	(gcc_jit_function_add_assignment_op): Likewise.
	(gcc_jit_function_add_conditional): Likewise.
	(gcc_jit_function_add_jump): Likewise.
	(gcc_jit_function_add_return): Likewise.
	(gcc_jit_function_new_loop): Likewise.
	(gcc_jit_loop_end): Likewise.
	(gcc_jit_context_set_str_option): Likewise.
	(gcc_jit_context_set_int_option): Likewise.
	(gcc_jit_context_set_bool_option): Likewise.
	(gcc_jit_context_compile): Likewise.
	(gcc_jit_result_get_code): Likewise.
	(gcc_jit_result_release): Likewise.
	* libgccjit.h (gcc_jit_function_new_forward_label): Clarify
	behavior.
	(gcc_jit_function_add_label): Likewise.

2013-10-17  David Malcolm  <dmalcolm@redhat.com>

	* internal-api.c (gcc::jit::context::get_void_type): Remove.
	(gcc::jit::context::get_char_type): Remove.
	(gcc::jit::context::get_int_type): Remove.
	(gcc::jit::context::get_float_type): Remove.
	(gcc::jit::context::get_double_type): Remove.
	(get_tree_node_for_type): New.
	(gcc::jit::context::get_type): New.
	(gcc::jit::context::new_rvalue_from_double): New.
	(gcc::jit::context::new_rvalue_from_ptr): New.
	* internal-api.h (gcc::jit::context::get_void_type): Remove.
	(gcc::jit::context::get_char_type): Remove.
	(gcc::jit::context::get_int_type): Remove.
	(gcc::jit::context::get_float_type): Remove.
	(gcc::jit::context::get_double_type): Remove.
	(gcc::jit::context::get_type): New.
	(gcc::jit::context::new_rvalue_from_double): New.
	(gcc::jit::context::new_rvalue_from_ptr): New.
	* libgccjit.c (gcc_jit_context_get_void_type): Remove.
	(gcc_jit_context_get_char_type): Remove.
	(gcc_jit_context_get_int_type): Remove.
	(gcc_jit_context_get_float_type): Remove.
	(gcc_jit_context_get_double_type): Remove.
	(gcc_jit_context_get_type): New.
	(gcc_jit_context_new_rvalue_from_double): New.
	(gcc_jit_context_new_rvalue_from_ptr): New.
	* libgccjit.h (gcc_jit_context_get_void_type): Remove.
	(gcc_jit_context_get_char_type): Remove.
	(gcc_jit_context_get_int_type): Remove.
	(gcc_jit_context_get_float_type): Remove.
	(gcc_jit_context_get_double_type): Remove.
	(enum gcc_jit_types): New.
	(gcc_jit_context_get_type): New.
	(gcc_jit_context_new_rvalue_from_double): New.
	(gcc_jit_context_new_rvalue_from_ptr): New.
	* libgccjit.map (gcc_jit_context_get_void_type): Remove.
	(gcc_jit_context_get_char_type): Remove.
	(gcc_jit_context_get_int_type): Remove.
	(gcc_jit_context_get_float_type): Remove.
	(gcc_jit_context_get_double_type): Remove.
	(enum gcc_jit_types): New.
	(gcc_jit_context_get_type): New.
	(gcc_jit_context_new_rvalue_from_double): New.
	(gcc_jit_context_new_rvalue_from_ptr): New.
	* TODO.rst ("access to more primitive types"): Remove
	completed item.

2013-10-17  David Malcolm  <dmalcolm@redhat.com>

	* libgccjit.h: Add and reword comments throughout.

2013-10-17  David Malcolm  <dmalcolm@redhat.com>

	* TODO.rst: Update.

2013-10-16  David Malcolm  <dmalcolm@redhat.com>

	* TODO.rst (gcc_jit_context_new_local): Remove completed item.
	* internal-api.c (gcc::jit::context::new_local): Replace with...
	(gcc::jit::function::new_local): ...this, and change return type
	from (local*) to (lvalue*).
	* internal-api.h (gcc::jit::local): Eliminate.
	(gcc::jit::context::new_local): Replace with...
	(gcc::jit::function::new_local): ...this, and change return type
	from (local*) to (lvalue*).
	* libgccjit.c (gcc_jit_local): Eliminate.
	(gcc_jit_context_new_local): Replace with...
	(gcc_jit_function_new_local): ...this, and change return type
	from (gcc_jit_local*) to (gcc_jit_lvalue*).
	(gcc_jit_local_as_lvalue): Remove.
	(gcc_jit_local_as_rvalue): Remove.
	* libgccjit.h (gcc_jit_local): Remove.
	(gcc_jit_context_new_local): Replace with...
	(gcc_jit_function_new_local): ...this, and change return type
	from (gcc_jit_local*) to (gcc_jit_lvalue*).
	(gcc_jit_local_as_lvalue): Remove.
	(gcc_jit_local_as_rvalue): Remove.
	* libgccjit.map (gcc_jit_context_new_local): Replace with...
	(gcc_jit_function_new_local): ...this.
	(gcc_jit_local_as_lvalue): Remove.
	(gcc_jit_local_as_rvalue): Remove.

2013-10-15  David Malcolm  <dmalcolm@redhat.com>

	* libgccjit.h (gcc_jit_location): Rewrite comment to reflect
	that this part of the API is now implemented.
	("Functions for use within the code factory."): Add notes on
	memory-management and lifetimes.
	* notes.txt: Update diagram to show handle_locations.

2013-10-15  David Malcolm  <dmalcolm@redhat.com>

	* TODO.rst: Update.

2013-10-14  David Malcolm  <dmalcolm@redhat.com>

	* libgccjit.map: Alphabetize the exported symbols.

2013-10-14  David Malcolm  <dmalcolm@redhat.com>

	* internal-api.c (gcc::jit::context::new_field): Implement
	location support, by calling set_tree_location.
	(gcc::jit::context::new_struct_type): Likewise.
	(gcc::jit::context::new_param): Likewise.
	(gcc::jit::context::new_function): Likewise.
	(gcc::jit::context::new_global): Likewise.
	(gcc::jit::context::new_local): Likewise.
	(gcc::jit::context::new_binary_op): Likewise.
	(gcc::jit::context::new_comparison): Likewise.
	(gcc::jit::context::new_call): Likewise.
	(gcc::jit::context::new_array_lookup): Likewise.
	(gcc::jit::context::new_field_access): Likewise.
	(gcc::jit::context::add_assignment): Likewise.
	(gcc::jit::context::add_conditional): Likewise.
	(gcc::jit::function::add_label): Likewise.
	(gcc::jit::function::add_jump): Likewise.
	(gcc::jit::function::add_return): Likewise.
	(gcc::jit::function::place_forward_label): Likewise, adding
	location parameter.
	(gcc::jit::loop::loop): Add loc arg to place_forward_label.
	(gcc::jit::loop::end): Likewise.
	(gcc::jit::context::invoke_code_factory): Call handle_locations
	after the client callback is done, before any GC can run.
	(line_comparator): New.
	(location_comparator): New.
	(gcc::jit::context::handle_locations): New.
	(gcc::jit::context::new_location): New.
	(gcc::jit::context::set_tree_location): New.
	(gcc::jit::context::get_source_file): New.
	(gcc::jit::source_file::source_file): New.
	(gcc::jit::source_file::get_source_line): New.
	(gcc::jit::source_line::source_line): New.
	(gcc::jit::source_line::get_location): New.
	(gcc::jit::location::location): New.
	* internal-api.h (gcc::jit::context::new_location): New.
	(gcc::jit::context::set_tree_location): New.
	(gcc::jit::context::handle_locations): New.
	(gcc::jit::context::get_source_file): New.
	(gcc::jit::context::m_source_files): New field.
	(gcc::jit::context::m_cached_locations: New field.
	(gcc::jit::function::place_forward_label): Add location
	parameter.
	(gcc::jit::function::set_tree_location): New.
	(gcc::jit::source_file): New class.
	(gcc::jit::source_line): New class.
	(gcc::jit::location): New class.
	* libgccjit.c (gcc_jit_context_new_location): New.
	(gcc_jit_function_place_forward_label): Add location parameter,
	changing public API.
	* libgccjit.h (gcc_jit_context_new_location): New.
	(gcc_jit_function_place_forward_label): Add location parameter,
	changing public API.
	* libgccjit.map (gcc_jit_context_new_location): New.
	(main): Remove obsolete export.
	(called_function): Likewise.

2013-10-11  David Malcolm  <dmalcolm@redhat.com>

	* internal-api.c: Update includes to reflect move of decl of
	dump_function_to_file from tree-dump.h to tree-flow.h in
	r203320.

2013-10-10  David Malcolm  <dmalcolm@redhat.com>

	* libgccjit.h (GCC_JIT_BOOL_OPTION_DUMP_SUMMARY): New.
	* internal-api.c ((gcc::jit::context::compile): Implement
	GCC_JIT_BOOL_OPTION_DUMP_SUMMARY.

2013-10-10  David Malcolm  <dmalcolm@redhat.com>

	* libgccjit.h (GCC_JIT_BOOL_OPTION_SELFCHECK_GC): Improve
	documentation.
	(GCC_JIT_BOOL_OPTION_DUMP_INITIAL_GIMPLE): Likewise.

2013-10-10  David Malcolm  <dmalcolm@redhat.com>

	* libgccjit.h: Clarify the separation of the API into "outside
	the callback" and "within the callback" entrypoints, moving the
	latter to the bottom of the header.

2013-10-10  David Malcolm  <dmalcolm@redhat.com>

	* libgccjit.h: Add comments throughout.

2013-10-09  David Malcolm  <dmalcolm@redhat.com>

	* internal-api.c (gcc::jit::context::~context): Fix indentation;
	clean up memory allocations when using
	GCC_JIT_BOOL_OPTION_KEEP_INTERMEDIATES.

2013-10-09  David Malcolm  <dmalcolm@redhat.com>

	* libgccjit.h (enum gcc_jit_bool_option): Add
	GCC_JIT_BOOL_OPTION_DUMP_EVERYTHING.
	* internal-api.c (gcc::jit::context::compile): Implement
	GCC_JIT_BOOL_OPTION_DUMP_EVERYTHING.

2013-10-09  David Malcolm  <dmalcolm@redhat.com>

	* libgccjit.h (enum gcc_jit_bool_option): Add
	GCC_JIT_BOOL_OPTION_KEEP_INTERMEDIATES.
	* internal-api.c (gcc::jit::context::~context): Implement
	GCC_JIT_BOOL_OPTION_KEEP_INTERMEDIATES.

2013-10-08  David Malcolm  <dmalcolm@redhat.com>

	* internal-api.c (gcc::jit::context::compile): Use mkdtemp to
	create a temporary directory and create the .s and .so files
	there, rather than writing to "fake.s" and then reading it to
	make "fake.so", then using it, fixing various possible race
	attacks by processes that can write to the process' current
	working directory.
	(gcc::jit::context::~context): Clean up tempfiles and path
	buffers.
	* internal-api.h (gcc::jit::context): Add fields
	m_path_template, m_path_tempdir, m_path_c_file, m_path_s_file,
	m_path_so_file.

2013-10-08  David Malcolm  <dmalcolm@redhat.com>

	* internal-api.c (gcc::jit::context::new_function): Fix leak of
	arg_types.

2013-10-08  David Malcolm  <dmalcolm@redhat.com>

	* internal-api.c (gcc::jit::context::~context): New.
	* internal-api.h (gcc::jit::context::~context): New.

2013-10-07  David Malcolm  <dmalcolm@redhat.com>

	* internal-api.c (gcc::jit::context::compile): Implement
	GCC_JIT_BOOL_OPTION_SELFCHECK_GC.

	* libgccjit.h (enum gcc_jit_bool_option): Add
	GCC_JIT_BOOL_OPTION_SELFCHECK_GC.

2013-10-07  David Malcolm  <dmalcolm@redhat.com>

	* Make-lang.in: Rename JIT_OBJS to jit_OBJS.  Delete manual
	dependencies.

2013-10-04  David Malcolm  <dmalcolm@redhat.com>

	* internal-api.c (gcc::jit::context::new_global): New.
	* internal-api.h (gcc::jit::context::new_global): New.
	* libgccjit.c (gcc_jit_context_new_global) New.
	* libgccjit.h (gcc_jit_context_new_global) New.
	* libgccjit.map: Add gcc_jit_context_new_global.

2013-10-03  David Malcolm  <dmalcolm@redhat.com>

	* libgccjit.c (gcc_jit_param_as_lvalue): New.
	* libgccjit.h (gcc_jit_param_as_lvalue): New.
	* libgccjit.map: Add gcc_jit_param_as_lvalue.

2013-10-03  David Malcolm  <dmalcolm@redhat.com>

	* internal-api.c (gcc::jit::function::postprocess): Dump gimple
	using dump_function_to_file rather than debug_gimple_seq so that
	we also get the declaration.

2013-10-03  David Malcolm  <dmalcolm@redhat.com>

	* Make-lang.in: New.
	* TODO.rst: New.
	* config-lang.in: New.
	* dummy-frontend.c: New.
	* internal-api.c: New.
	* internal-api.h: New.
	* libgccjit.c: New.
	* libgccjit.h: New.
	* libgccjit.map: New.
	* notes.txt: New.
