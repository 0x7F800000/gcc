2012-02-16  Andrew Pinski  <apinski@cavium.com>

	* tree-ssa-fold.c (expand_possible_comparison): Add reversed_edges
	argument.
	Set *reversed_edges argument if we had TRUTH_NOT_EXPR or BIT_NOT_EXPR
	and strip off the TRUTH_NOT_EXPR and BIT_NOT_EXPR.
	(forward_propagate_into_comparison): Loop around on
	forward_propagate_into_comparison_1 and expand_possible_comparison.
	Allow for reversed_edges only with ssa_name.
	(forward_propagate_into_comparison): Loop around on
	forward_propagate_into_comparison_1 and expand_possible_comparison.
	Deal with reversed_edges.
	(forward_propagate_into_cond): Loop around on
	forward_propagate_into_comparison_1 and expand_possible_comparison.
	* tree-ssa-forwprop.c (delete_dead_code_uptil): New function.
	(ssa_forward_propagate_and_combine): Print out more debugging info
	in the dump.
	Also delete dead code if ssa_combine did something.

2012-02-15  Andrew Pinski  <apinski@cavium.com>

	* tree-flow.h (ssa_combine): Make return value bool.
	* tree-ssa-fold.c (remove_prop_source_from_use): Delete.
	(forward_propagate_into_comparison): Make return value bool.
	Allow the other passes remove the dead code.
	(forward_propagate_into_cond): Boolize.
	(forward_propagate_into_gimple_cond): Make return value bool.
	Allow the other passes remove the dead code.
	(combine_conversions): Likewise.
	(ssa_combine): Make return value bool.
	Remove logic that returned 1 vs 2.
	* tree-ssa-forwprop.c (ssa_forward_propagate_and_combine):
	Change to run cfgcleanup if ssa_combine just returns nonzero.

2012-02-15  Andrew Pinski  <apinski@cavium.com>

	* tree-ssa-forwprop.c (forward_prop_nonzero): New function.
	(ssa_forward_propagate_and_combine): Pass forward_prop_nonzero
	to ssa_combine.
	* tree-ssa-fold.c (simplify_bitwise_binary): nonzerobitsp will never
	be non NULL.

2012-02-15  Andrew Pinski  <apinski@cavium.com>

	* tree-vrp.c (remove_range_assertions): Use gimple_debug_bind_p
	instead of is_gimple_debug.  Also check gimple_debug_bind_get_value
	before checking the tree code.

2012-02-14  Andrew Pinski  <apinski@cavium.com>

	* tree-flow.h (nonzerobits_t): New type.
	(ssa_combine): Add nonzerobits_t argument.
	* tree-ssa-fold.c (simplify_bitwise_binary): Add
	nonzerobitsp argument.
	Fold ~X & N into X ^ N if X's nonzerobits are the same as N.
	(ssa_combine): Add nonzerobitsp argument.
	Update call to simplify_bitwise_binary.
	* tree-ssa-forwprop.c (ssa_forward_propagate_and_combine):
	Update call to ssa_combine.
	* tree-vrp.c (remove_range_assertions): Remove asserts from
	gimple debug also.
	(vrp_nonzerop): New function.
	(simplify_stmt_using_ranges): Call ssa_combine before doing any
	other simplification.

2012-02-14  Andrew Pinski  <apinski@cavium.com>

	* tree-ssa-fold.c (simplify_bitwise_binary): Add fold of "(X ^ Y) & Y"
	as "~X & Y".

2012-02-14  Andrew Pinski  <apinski@cavium.com>

	* tree-ssa-fold.c (simplify_bitwise_binary): Initialize def1_arg2
	and def2_arg2 to NULL.

2012-02-14  Andrew Pinski  <apinski@cavium.com>

	* tree-ssa-forwprop.c: Split the combing functions out into ...
	* tree-ssa-fold.c: this.
	* Makefile.in (OBJS): Add tree-ssa-fold.o.
	(tree-ssa-fold.o): New file.

2012-02-13  Andrew Pinski  <apinski@cavium.com>

	* tree-ssa-forwprop.c (simplify_bitwise_binary): Fix merge of the
	last two patches.

2012-02-13  Andrew Pinski  <apinski@cavium.com>

	* fold-const.c (fold_comparison): Handle ((CAST)~X).
	* tree-ssa-forwprop.c (combine_cond_expr_cond): Swap operands so
	that fold_binary_loc would not return a non-folded tree.
	Don't call canonicalize_cond_expr_cond.
	(forward_propagate_into_comparison_1): Also try combine casts into the
	comparisons.
	(expand_possible_comparison): New function.
	(forward_propagate_into_comparison): Call expand_possible_comparison.
	(forward_propagate_into_gimple_cond): Take also a gsi.
	Call expand_possible_comparison.
	(forward_propagate_into_cond): Call expand_possible_comparison.
	(ssa_forward_propagate_and_combine): Update call to
	forward_propagate_into_gimple_cond.

2012-02-13  Andrew Pinski  <apinski@cavium.com>

	PR middle-end/33512
	* tree-ssa-forwprop.c (defcodefor_name): New function.
	(simplify_bitwise_binary): Use defcodefor_name.
	Simplify "( X | Y) & X" to X and "( X & Y) | X" to X.
	Simplify "(~X | Y) & X" to "X & Y" and
	"(~X & Y) | X" to "X | Y".

2012-02-13  Andrew Pinski  <apinski@cavium.com>

	* tree-ssa-forwprop.c (simplify_bitwise_binary): Assert that we have
	AND/XOR or IOR.
	Fold "(A OP1 B) OP0 (C OP1 B)" to "(A OP0 C) OP1 B".


Copyright (C) 2012 Free Software Foundation, Inc.

Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.

