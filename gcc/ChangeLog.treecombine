2012-02-21  Andrew Pinski  <apinski@cavium.com>

	* tree-ssa-fold.c (expand_possible_comparison): Delete.
	(forward_propagate_into_cond): Add nonzerobits argument.
	Call gimple_fold_binary_loc instead of looping on
	forward_propagate_into_comparison_1.
	Clean up the code after calling gimple_fold_binary_loc.
	(ssa_combine): Update call to nonzerobits.

2012-02-21  Andrew Pinski  <apinski@cavium.com>

	* tree-ssa-fold.c (constant_pointer_difference): Move back to
	tree-ssa-forwprop.c.
	(simplify_builtin_call): Likewise.
	(ssa_combine): Don't call simplify_builtin_call.
	* tree-ssa-forwprop.c (constant_pointer_difference): Moved back
	from tree-ssa-fold.c
	(simplify_builtin_call): Likewise.
	(ssa_forward_propagate_and_combine): Before calling ssa_combine,
	call simplify_builtin_call and also don't call gsi_next if
	simplify_builtin_call did something.

2012-02-21  Andrew Pinski  <apinski@cavium.com>

	* tree-ssa-fold.c (combine_cond_expr_cond): Strip off
	all conversions from bool to bool types and not just the
	useless ones.
	(forward_propagate_into_comparison): Ignore the type conversions
	inside the loop.
	Convert the type of the returned expression to type.
	(forward_propagate_into_gimple_cond): Strip off all
	conversions from bool to bool types as GIMPLE_COND
	does care what type of bool it takes.

2012-02-20  Andrew Pinski  <apinski@cavium.com>

	* tree-ssa-fold.c (combine_cond_expr_cond): Strip off
	the useless type conversions after fold_binary.
	Check to see if we change from (A) != 0 to just A if A
	is not a comparison or a ssa_name.
	(forward_propagate_into_comparison): Use build1 instead
	of fold_build1.
	(forward_propagate_into_gimple_cond): Take a nonzerobits_t also.
	Cleanup and use gimple_fold_binary_loc instead of doing calling
	forward_propagate_into_comparison_1/expand_possible_comparison.
	(ssa_combine): Update call to forward_propagate_into_gimple_cond.

2012-02-20  Andrew Pinski  <apinski@cavium.com>

	* fold-const.c (fold_undefer_overflow_warnings): Don't
	use return of a void function.

2012-02-20  Andrew Pinski  <apinski@cavium.com>

	* tree-ssa-fold.c (forward_propagate_into_comparison): Take a loc,
	code, a type and an operand instead of a gimple_stmt_iterator.
	(gimple_fold_binary_loc): Call forward_propagate_into_comparison
	for tcc_comparison code class.
	(ssa_combine): Remove special handling of tcc_comparison as
	gimple_fold_binary_loc handles it.

2012-02-20  Andrew Pinski  <apinski@cavium.com>

	* tree.c (save_expr): Don't wrap a SSA_NAME with a save_expr.
	* tree-ssa-fold.c (forward_propagate_into_comparison): Change
	how we handle the looping.  Don't expand the comparison
	instead return if the new expression if canonicalize_cond_expr_cond
	returns NULL.

2012-02-19  Andrew Pinski  <apinski@cavium.com>

	* tree-ssa-fold.c (forward_propagate_into_comparison): Return tree
	instead of bool.
	(ssa_combine): Handle the return type change of
	forward_propagate_into_comparison.

2012-02-18  Andrew Pinski  <apinski@cavium.com>

	* fold-const.c (fold_undefer_overflow_warnings): Split out into ...
	(fold_undefer_overflow_warnings_loc): this.
	* tree.h (fold_undefer_overflow_warnings_loc): Prototype.
	* tree-ssa-fold.c (combine_cond_expr_cond): Change argument stmt for a location
	and a nowarnings bool.
	(forward_propagate_into_comparison_1): Change argument stmt for a location and
	a nowarnings bool.
	Update call to combine_cond_expr_cond.
	(forward_propagate_into_comparison): Update call to forward_propagate_into_comparison_1.
	(forward_propagate_into_gimple_cond): Likewise.
	(forward_propagate_into_cond): Likewise.

2012-02-18  Andrew Pinski  <apinski@cavium.com>

	* tree-ssa-fold.c (combine_conversions): Fix creation of the new tree.
	Use the original code instead of NOP_EXPR.

2012-02-18  Andrew Pinski  <apinski@cavium.com>

	* tree-ssa-fold.c (simplify_not_neg_expr): Take a loc, code, a type
	and an operand instead of a gimple_stmt_iterator.
	(gimple_fold_unary_loc): Call simplify_not_neg_expr.
	(ssa_combine): Remove call to simplify_not_neg_expr since that is already
	handled by gimple_fold_unary_loc.

2012-02-18  Andrew Pinski  <apinski@cavium.com>

	* tree-ssa-fold.c (gimple_fold_build2_loc): Fix formating.
	(gimple_fold_build1_loc): Likewise.
	(nonzerobits_1): New function.
	(nonzerobits): New function.
	(simplify_bitwise_binary): Use nonzerobits instead of calling
	argument directly.
	* tree-ssa-forwprop.c (forward_prop_nonzero): Just return
	double_int_minus_one as the generic function now handles the heavy
	lifting.

2012-02-17  Andrew Pinski  <apinski@cavium.com>

	* tree-ssa-fold.c (combine_conversions): Take a loc, code, a type
	and an operand instead of a gimple_stmt_iterator.
	Return a tree of the simplified tree, calling gimple_fold_build1_loc
	if needed.
	(gimple_fold_binary_loc): Move to right above ssa_combine.
	(gimple_fold_unary_loc): Likewise.
	Call combine_conversions for conversions.
	(ssa_combine): Remove call to combine_conversions since that is
	handled by gimple_fold_unary_loc now.

2012-02-17  Andrew Pinski  <apinski@cavium.com>

	* tree-ssa-fold.c (gimple_fold_build2_loc): New function.
	(gimple_fold_build1_loc): New function.
	(simplify_bitwise_binary_1): Even if fold_stmt will handle them,
	handle them here so we can reduce the number of temps that might
	be used.
	(simplify_bitwise_binary_2): Rename back to simplify_bitwise_binary.
	Take location and type instead of gimple_stmt_iterator.
	Use gimple_fold_build2 instead of simplify_bitwise_binary_3/build2.
	Use gimple_fold_build1 instead of build1 in some cases.
	(simplify_bitwise_binary_3): Remove.
	(gimple_fold_binary_loc): New function.
	(gimple_fold_unary_loc): New function.
	(combine_conversions): Use gimple_fold_build2_loc instead of
	simplify_bitwise_binary_3.
	(ssa_combine): Call gimple_fold_binary_loc/gimple_fold_unary_loc.
	Remove special casing of the bitwise operator as those are now handled
	via gimple_fold_binary_loc.

2012-02-17  Andrew Pinski  <apinski@cavium.com>

	* tree-ssa-fold.c (simplify_bitwise_binary_2): Fix typo
	in handling non SSA_NAMEs for arg2.
	Use simplify_bitwise_binary_3 instead of build2 to fold more.
	(combine_conversions): Take nonzerobits_t.
	Replace explict usage of TREE_TYPE (lhs) with a preloaded variable.
	Use simplify_bitwise_binary_3 instead of fold_build2.
	(ssa_combine): Update call to combine_conversions.

2012-02-17  Andrew Pinski  <apinski@cavium.com>

	* tree-ssa-fold.c (simplify_bitwise_binary_2): Set
	def1_arg1/def1_arg2/def2_arg1/def2_arg2 for non SSA_NAME case.
	Replace calls to fold_build2/fold_build1 with build2/build1 since
	fold will unfold the simplified trees.
	Call simplify_bitwise_binary_3 in the cases where we can if we are
	returning a newly created bitwise tree.

2012-02-17  Andrew Pinski  <apinski@cavium.com>

	* tree-ssa-fold.c (valid_simple_gimple): New function.
	(build_simple_gimple): New function.
	(extract_simple_gimple): New function.
	(defcodefor_name): Set *code, *arg1, *arg2 even if there
	is no definition.
	(simplify_bitwise_binary): Return tree type and split out to ...
	(simplify_bitwise_binary_2): This. Instead of updating the statement,
	return a tree which contains the simplified expression.
	Also call simplify_bitwise_binary_3 if we want to do some recursion.
	(simplify_bitwise_binary_3): New function.
	(ssa_combine): Handle simplify_bitwise_binary returning a tree.
	Expanding the tree if needed.

2012-02-17  Andrew Pinski  <apinski@cavium.com>

	* tree-ssa-forwprop.c (delete_dead_code_uptil): Take a
	gimple_stmt_iterator instead.  Reverse the order
	of the statement walk and start at the previous
	instruction of UNTIL instead.
	(ssa_forward_propagate_and_combine): Update call to
	delete_dead_code_uptil.

2012-02-16  Andrew Pinski  <apinski@cavium.com>

	* tree-ssa-ccp.c (ccp_finalize): Fix extra ;.
	* tree-ssa-fold.c (simplify_bitwise_binary):
	Fold BIT_AND_EXPR based on nonzero bits.
	Fold BIT_IOR_EXPR based on nonzero bits.
	* tree-ssa-forwporp.c (forward_prop_nonzero):
	Add a simple calucation of the zero bits
	based on the definition of the ssa_name.

2012-02-16  Andrew Pinski  <apinski@cavium.com>

	* tree-ssa-fold.c (expand_possible_comparison): Add reversed_edges
	argument.
	Set *reversed_edges argument if we had TRUTH_NOT_EXPR or BIT_NOT_EXPR
	and strip off the TRUTH_NOT_EXPR and BIT_NOT_EXPR.
	(forward_propagate_into_comparison): Loop around on
	forward_propagate_into_comparison_1 and expand_possible_comparison.
	Allow for reversed_edges only with ssa_name.
	(forward_propagate_into_comparison): Loop around on
	forward_propagate_into_comparison_1 and expand_possible_comparison.
	Deal with reversed_edges.
	(forward_propagate_into_cond): Loop around on
	forward_propagate_into_comparison_1 and expand_possible_comparison.
	* tree-ssa-forwprop.c (delete_dead_code_uptil): New function.
	(ssa_forward_propagate_and_combine): Print out more debugging info
	in the dump.
	Also delete dead code if ssa_combine did something.

2012-02-15  Andrew Pinski  <apinski@cavium.com>

	* tree-flow.h (ssa_combine): Make return value bool.
	* tree-ssa-fold.c (remove_prop_source_from_use): Delete.
	(forward_propagate_into_comparison): Make return value bool.
	Allow the other passes remove the dead code.
	(forward_propagate_into_cond): Boolize.
	(forward_propagate_into_gimple_cond): Make return value bool.
	Allow the other passes remove the dead code.
	(combine_conversions): Likewise.
	(ssa_combine): Make return value bool.
	Remove logic that returned 1 vs 2.
	* tree-ssa-forwprop.c (ssa_forward_propagate_and_combine):
	Change to run cfgcleanup if ssa_combine just returns nonzero.

2012-02-15  Andrew Pinski  <apinski@cavium.com>

	* tree-ssa-forwprop.c (forward_prop_nonzero): New function.
	(ssa_forward_propagate_and_combine): Pass forward_prop_nonzero
	to ssa_combine.
	* tree-ssa-fold.c (simplify_bitwise_binary): nonzerobitsp will never
	be non NULL.

2012-02-15  Andrew Pinski  <apinski@cavium.com>

	* tree-vrp.c (remove_range_assertions): Use gimple_debug_bind_p
	instead of is_gimple_debug.  Also check gimple_debug_bind_get_value
	before checking the tree code.

2012-02-14  Andrew Pinski  <apinski@cavium.com>

	* tree-flow.h (nonzerobits_t): New type.
	(ssa_combine): Add nonzerobits_t argument.
	* tree-ssa-fold.c (simplify_bitwise_binary): Add
	nonzerobitsp argument.
	Fold ~X & N into X ^ N if X's nonzerobits are the same as N.
	(ssa_combine): Add nonzerobitsp argument.
	Update call to simplify_bitwise_binary.
	* tree-ssa-forwprop.c (ssa_forward_propagate_and_combine):
	Update call to ssa_combine.
	* tree-vrp.c (remove_range_assertions): Remove asserts from
	gimple debug also.
	(vrp_nonzerop): New function.
	(simplify_stmt_using_ranges): Call ssa_combine before doing any
	other simplification.

2012-02-14  Andrew Pinski  <apinski@cavium.com>

	* tree-ssa-fold.c (simplify_bitwise_binary): Add fold of "(X ^ Y) & Y"
	as "~X & Y".

2012-02-14  Andrew Pinski  <apinski@cavium.com>

	* tree-ssa-fold.c (simplify_bitwise_binary): Initialize def1_arg2
	and def2_arg2 to NULL.

2012-02-14  Andrew Pinski  <apinski@cavium.com>

	* tree-ssa-forwprop.c: Split the combing functions out into ...
	* tree-ssa-fold.c: this.
	* Makefile.in (OBJS): Add tree-ssa-fold.o.
	(tree-ssa-fold.o): New file.

2012-02-13  Andrew Pinski  <apinski@cavium.com>

	* tree-ssa-forwprop.c (simplify_bitwise_binary): Fix merge of the
	last two patches.

2012-02-13  Andrew Pinski  <apinski@cavium.com>

	* fold-const.c (fold_comparison): Handle ((CAST)~X).
	* tree-ssa-forwprop.c (combine_cond_expr_cond): Swap operands so
	that fold_binary_loc would not return a non-folded tree.
	Don't call canonicalize_cond_expr_cond.
	(forward_propagate_into_comparison_1): Also try combine casts into the
	comparisons.
	(expand_possible_comparison): New function.
	(forward_propagate_into_comparison): Call expand_possible_comparison.
	(forward_propagate_into_gimple_cond): Take also a gsi.
	Call expand_possible_comparison.
	(forward_propagate_into_cond): Call expand_possible_comparison.
	(ssa_forward_propagate_and_combine): Update call to
	forward_propagate_into_gimple_cond.

2012-02-13  Andrew Pinski  <apinski@cavium.com>

	PR middle-end/33512
	* tree-ssa-forwprop.c (defcodefor_name): New function.
	(simplify_bitwise_binary): Use defcodefor_name.
	Simplify "( X | Y) & X" to X and "( X & Y) | X" to X.
	Simplify "(~X | Y) & X" to "X & Y" and
	"(~X & Y) | X" to "X | Y".

2012-02-13  Andrew Pinski  <apinski@cavium.com>

	* tree-ssa-forwprop.c (simplify_bitwise_binary): Assert that we have
	AND/XOR or IOR.
	Fold "(A OP1 B) OP0 (C OP1 B)" to "(A OP0 C) OP1 B".


Copyright (C) 2012 Free Software Foundation, Inc.

Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.

