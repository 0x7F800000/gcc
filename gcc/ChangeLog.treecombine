2012-03-12  Andrew Pinski  <apinski@cavium.com>

	* gimple-ssa-combine.c (simplify_mult_expr): Remove the
	simplification of "(A + B) * C", that should be handled
	by VN.

2012-03-12  Andrew Pinski  <apinski@cavium.com>

	* gimple-ssa-combine.c (nonzerobits): Add a FIXME for shifts
	and rotates.
	(simplify_not_neg_abs_expr): Double check that ABS_EXPR<ABS_EXPR<x>> is
	not simplified to just x.
	Simplify - (a + C) to -C + (-a) if -C will not overflow.
	Simplify - (a - b) to b - a.
	(simplify_mult_expr): Simplify (-A) * (-B) to A * B.
	Simplify ABS<A> * ABS<B> to A * B.
	Simplify (a * C) * D to a * (C*D) if C and D are constants.
	(simplify_plusminus): Simplify -1 - a to ~a.

2012-03-11  Andrew Pinski  <apinski@cavium.com>

	* gimple-fold.c (gimple_fold_stmt_to_constant_1):
	Add/Change comments about what needs to be moved
	to gimple-ssa-combine.c
	* gimple-ssa-combine.c: Include gimple-fold.h.
	(simplify_bitwise_binary): Add simplifying of
	"(a & B) | (a & C)" to "a & (B|C)".
	(simplify_pointer_plus): Call fold_binary on the
	case where both arguments are integer constants.
	(gimple_combine_binary): Don't call fold_binary
	for POINTER_PLUS_EXPR since simplify_pointer_plus
	handle those cases more correctly.
	(gimple_combine_constructor): New function.
	(gimple_combine_references): New function.
	(ssa_combine): Move the handling of SSA_NAME to GIMPLE_SINGLE_RHS.
	Move the handlng of the reference class to gimple_combine_references.
	Call gimple_combine_constructor for CONSTRUCTORs.
	* tree-ssa-ccp.c: Correct the debugging for DEBUG_SSA_COMBINE.
	* tree-ssa-sccvn.c: Likewise.

2012-03-11  Andrew Pinski  <apinski@cavium.com>

	* fold-const.c (fold_binary_loc): Fix the types up correctly
	when folding of (a & c) == (b & c) to (a^b) & c == 0.
	* gimple-fold.c (and_comparisons_1): Add a comment about what has
	been moved to gimple-ssa-combine.c and what has not.
	(or_comparisons_1): Likewise.
	* gimple-ssa-combine.c (forward_propagate_into_comparison): Renable
	folding of (a!=b) as a ^ b != 0.
	(comparison_code): New enum.
	(comparison_to_compcode): New function.
	(compcode_to_comparison): New function.
	(gimple_combine_comparisons): New function.
	(simplify_bitwise_binary): Use gimple_combine_convert instead of
	build1_loc.
	Fixup simplifying of "(A OP1 B) OP0 (C OP1 B)" when OP1 and OP0 are
	both xor.
	Do some simple reassiocation.
	Call gimple_combine_comparisons for when we have
	"(A CMP0 B) OP (A CMP1 B)".
	(combine_conversions): Use gimple_combine_build1 more.
	* tree-ssa-forwprop.c (delete_dead_code_uptil): Return
	a bool if there was a deletion happen.
	(ssa_forward_propagate_and_combine): Add TODO_remove_unused_locals
	if delete_dead_code_uptil returned true.
	* tree-ssa-ifcombine.c: Add some debugging for the cases where
	gimple_combine_build2 misses that maybe_fold_and_comparisons catches.

2012-03-08  Andrew Pinski  <apinski@cavium.com>

	* Makefile.in (gimple-ssa-combine.o): Remove
	dependency on tree-ssa-propagate.h.
	(tree-ssa-sccvn.o): Likewise.
	(tree-ssa-loop-ivopts.o): Likewise.
	* gimple-ssa-combine.c: Remove the include to
	tree-ssa-propagate.h.
	(gimple_combine_build2): Make global.
	(gimple_combine_build3): Likewise.
	(gimple_combine_build1): Likewise.
	* tree-ssa-propagate.h (valid_gimple_rhs_p): Move prototype to ...
	* tree-flow.h (valid_gimple_rhs_p): Here.
	(gimple_combine_build2): Add prototype.
	(gimple_combine_build1): Add prototype.
	(gimple_combine_build3): Add prototype.
	* tree-ssa-ifcombine.c (ifcombine_ifandif):
	Try using gimple_combine_build2 if maybe_fold_and_comparisons failed.
	Allow gimple rhs too and all comparisons.
	(ifcombine_iforif): 
	Try using gimple_combine_build2 if maybe_fold_or_comparisons failed.
	Allow gimple rhs too and all comparisons.
	* tree-ssa-loop-ivopts.c: Remove the include to
	tree-ssa-propagate.h.
	* tree-ssa-sccvn.c: Likewise.

2012-03-08  Andrew Pinski  <apinski@cavium.com>

	* gimple-ssa-combine.c (gimple_combine_convert): New function.
	(combine_cond_expr_cond): Remove the nowarnings argument.
	Use fold_undefer_and_ignore_overflow_warnings instead of
	calling fold_undefer_overflow_warnings.
	(forward_propagate_into_comparison_1): Rename to ..
	(forward_propagate_into_comparison): This. Removing the old
	forward_propagate_into_comparison.
	Simplify (a^b) !=/== 0 To a !=/== b.
	Simplify ((X)bool) != N where N is not 0 or 1.
	Simplify ((X)A) == N to A == N' where X and the type of A only
	differ by signess.
	Simplify bool == 0 to just bool.
	Simplify bool != 0 to just !bool.
	Simplify bool == 1 to just bool.
	Simplify bool != 1 to just !bool.
	Don't check is_gimple_min_invariant after the fold_binary.
	Update the call to combine_cond_expr_cond.
	Use gimple_combine_convert instead of fold_convert.
	(forward_propagate_into_gimple_cond): Don't Canonicalize
	as gimple_combine_binary will do that now.
	(forward_propagate_into_cond): Likewise.
	Use gimple_combine_convert instead of
	gimple_combine_build1 (.., NOP_EXPR).
	(simplify_bitwise_binary_1): Add loc argument.
	Use gimple_combine_convert instead of fold_convert.
	(simplify_bitwise_binary): Use gimple_combine_convert
	instead of fold_convert.
	Simplify ( A ^ B) ^ A to A and related reassociated ones.
	Simplify ( A | B) | A to (A | B) and related reassociated ones.
	Simplify ( A & B) | A to (A & B) and related reassociated ones.
	Update call to simplify_bitwise_binary_1.
	(simplify_pointer_plus): Use gimple_combine_convert
	instead of fold_convert and gimple_combine_build1 (..., NOP_EXPR).

2012-03-05  Andrew Pinski  <apinski@cavium.com>

	* gimple-fold.c: Add comments about
	what has been moved to ssa_combine
	and what needs needs to be moved.
	* gimple-ssa-combine.c (forward_propagate_into_comparison_1):
	Try calling fold_binary_loc first before doing any combining.
	(forward_propagate_into_gimple_cond): Handle the case where
	we already have a constant.
	* tree-ssa-ccp.c: Add a way to print out the cases where
	ssa_combine misses.
	(ccp_fold): If this is assigning from a simple constant, just
	return the constant.
	(do_ssa_ccp): Setup the gimple_combine valueizer hook.
	* tree-ssa-sccvn.c: Fix a comment about the ssa_combine debug.

2012-03-04  Andrew Pinski  <apinski@cavium.com>

	* gimple-ssa-combine.c (can_propagate_from):
	Fix the case for reference class with a
	SSA_NAME as the first operand.
	(forward_propagate_into_comparison_1): Simplify "A CMP A".
	(forward_propagate_into_comparison): Don't cycle if
	we got a constant.
	(simplify_plusminus): Simplify "A - C" to "A + -C".
	(simplify_complex_expr): New function.
	(simplify_view_convert): New function.
	(simplify_real_imag_parts): New function.
	(simplify_pointer_plus): Simplify "A +p 0" to A.
	(gimple_combine_binary): Call simplify_complex_expr
	for COMPLEX_EXPR.
	(gimple_combine_unary): Call simplify_view_convert
	for VCEs.
	Call simplify_real_imag_parts for REALPART_EXPR
	and IMAGPART_EXPR.
	(ssa_combine): Handle reference cases where the first
	operand is a SSA_NAME.
	* tree-ssa-sccvn.c (DEBUG_SSA_COMBINE): Commented out define.
	(simplify_binary_expression): Add debugging for places where
	ssa_combine might miss.
	Swap the operands if needed so that fold_binary does not
	return a new tree (this should go to the mainline).
	(simplify_unary_expression): Add debugging for places where
	ssa_combine might miss.
	(try_to_simplify): Likewise.

2012-03-04  Andrew Pinski  <apinski@cavium.com>

	* gimple-ssa-combine.c (simplify_mult_expr):
	Simplify "A*0", "A*1", "A*-1" and "(A+A)*C" for integer types.
	(simplify_pointer_plus): Simplify &D + C into an invariant address.
	(gimple_combine_unary): Use fold_unary_ignore_overflow_loc.
	* tree-ssa-sccvn.c (try_to_simplify): Return the rhs if it is a
	constant already.
	Call ssa_combine and return the expression if it is a
	valid_gimple_rhs_p.
	(init_scc_vn): Setup the gimple combine's valueizer.
	(free_scc_vn): Unset the gimple combine's valueizer.

2012-03-03  Andrew Pinski  <apinski@cavium.com>

	Starting to move gimple-fold.c and fold-const.c over to gimple-ssa-combine.c

	* gimple-fold.c: Add a comment saying this should
	move almost all of it should be moved over to gimple-ssa-combine.c
	(maybe_fold_or_comparisons): Remove comment about going into 
	gimple-fold-inline.h since this no longer applies after LTO is used.
	* gimple-ssa-combine.c (gimple_default_nonzero_bits): Remove.
	(nonzerobitsf): Default to NULL.
	(gimple_combine_set_nonzerobits): Don't change the value if it was
	NULL.
	(nonzerobits): Move handling of INTEGER_CST to after calling of
	defcodefor_name_3.
	Don't call nonzerobitsf if it is NULL.
	(simplify_mult_expr): New function.
	(associate_plusminus): Rename to ...
	(simplify_plusminus): This.
	(simplify_pointer_plus): New function.
	(gimple_combine_binary): If fold_binary return NULL, then continue
	we might be able to simplify better.
	Handle the rename of associate_plusminus to simplify_plusminus.
	Call simplify_mult_expr and simplify_pointer_plus.
	(gimple_combine_addr_expr): New function.
	(ssa_combine): Call gimple_combine_addr_expr for ADDR_EXPRs.

2012-03-03  Andrew Pinski  <apinski@cavium.com>

	* gimple-ssa-combine.c (replace_rhs_after_ssa_combine): Handle
	mismatched types better.  Also reject if we are replacing into
	a lhs which is not a SSA_NAME if the new expression is not
	a is_gimple_val.
	* tree-vrp.c (vrp_valueizer): Only consider invariants
	as a way to valueize.

2012-03-02  Andrew Pinski  <apinski@cavium.com>

	* gimple-ssa-combine.c (valuzeierf): Rename to ...
	(valueizerv): This.  Default to NULL.
	(gimple_default_valueizer): Rename to ...
	(valueizerf): This.
	Call valueizerv on the argument before doing anything
	else.
	(gimple_combine_set_valueizer): New function.
	s/valuzeierf/valueizerv/ globally.
	* tree-vrp.c (vrp_valueizer): New function.
	(vrp_finalize): Call gimple_combine_set_nonzerobits
	and gimple_combine_set_valueizer.
	(execute_vrp): Don't call gimple_combine_set_nonzerobits.

2012-03-02  Andrew Pinski  <apinski@cavium.com>

	* gimple-ssa-combine.c (get_prop_source_stmt): Move up.
	(can_propagate_from): Likewise.
	(gimple_default_valueizer): New function.
	(valuzeierf): New variable.
	(gimple_combine_build1): Fix C90 code.
	(defcodefor_name_3): Call valuzeierf on the name.
	Don't call get_prop_source_stmt as valuzeierf
	should provide what we are looking for.
	Call valuzeierf on the arguments before returning.
	(forward_propagate_into_cond): Use build_int_cst_type.
	Simplify "1 ? A : B" to "A".
	Simplify "0 ? A : B" to "B".
	(simplify_gimple_switch): Return the def if the code is
	INTEGER_CST and the original cond was not def.
	(simplify_bitwise_binary): Use build_zero_cst.
	(associate_plusminus): Simplify "A+-0" and "0+-A".
	Simplify "A-A" to 0.
	Also try to handle ADDR_EXPR differences.
	(gimple_combine_ternary): Call valuzeierf on the arguments.
	Call fold if all are constants.
	(gimple_combine_binary): Call valuzeierf on the arguments.
	(gimple_combine_unary): Call valuzeierf on the arguments.
	Call fold if all are constants.
	(ssa_combine): If we have a simple assignment from a ssa_name
	then call valuzeirf on the argument.
	Simplify how we call gimple_combine_*.
	(replace_rhs_after_ssa_combine): Use build_zero_cst.
	* tree-flow.h (valueizer_t): New type.
	(gimple_combine_set_valueizer): New prototype.

2012-02-29  Andrew Pinski  <apinski@cavium.com>

	* gimple-ssa-combine.c (gimple_combine_build1): Simplify
	(bool)(a CMP b) into just (a CMP b).
	(truth_valued_ssa_name): a nonzero value of one is also
	a truth value.
	(forward_propagate_into_comparison_1):
	Use defcodefor_name_3 instead of defcodefor_name.
	Try to simplify (a?b:c) CMP d into a?(b CMP d) : (c CMP d)
	if either b CMP d or c CMP d simplifies down to a
	constant.
	(forward_propagate_into_comparison): Use only way of returning
	deleting duplicated code.
	(forward_propagate_into_gimple_cond): Change return type to tree.
	Only take a statement.
	Don't do the replacement of the statement here.
	(forward_propagate_into_cond): Handle "bool == 0 ? b : a"
	and "bool != 1" with a call to gimple_combine_build3.
	Simplify "A ? B : 0" to "A & B" if B is bool expr.
	Simplify "A ? 0 : B".
	Simplify "A ? B : 1".
	Simplify "A ? 1 : B".
	(simplify_gimple_switch): Change return type to tree.
	Don't update the statement here.
	(extract_simple_gimple): Delete, force_gimple_operand_gsi does the
	same thing.
	(simplify_bitwise_binary): Use build_int_cst instead of fold_convert.
	Simplify A ^| B if A or B is known to be zero.
	Simplify A & B if A or B is known to be zero.
	(gimple_combine_binary): For assert expressions, just return NULL.
	If both arguments are constant, use fold_binary_loc to fold them into
	constants. 
	(ssa_combine): Return a tree and take a statment instead of a
	statement iterator.
	(replace_rhs_after_ssa_combine): New function.
	* tree-flow.h (ssa_combine): Return tree and take a gimple.
	(replace_rhs_after_ssa_combine): New prototype.
	* tree-ssa-ccp (const_val_size): New variable.
	(get_value): If this is a new ssa name return a varying variable.
	(set_value_varying): Return right away if this is a new ssa name.
	(set_lattice_value): Likewise.
	(ccp_initialize): Set const_val_size.
	(do_dbg_cnt): Only do up to const_val_size.
	(ccp_nonzerop): New function.
	(ccp_fold_stmt): Add commented out code since it does not currently
	work.
	(do_ssa_ccp): Set the nonzerobits hook.
	* tree-ssa-forwprop.c (ssa_forward_propagate_and_combine): Update call
	to ssa_combine.  Call replace_rhs_after_ssa_combine.
	* tree-vrp.c (extract_range_from_assignment): Call ssa_combine
	instead of gimple_combine_* directly.
	(register_edge_assert_for_2): Handle (int)UNAME >= 0 as
	UNAME < (unsigned)SIGNED_MIN for the asserts.
	(vrp_visit_cond_stmt): Call ssa_combine and try to use that result.
	(vrp_visit_switch_stmt): Likewise.
	(simplify_stmt_using_ranges): Update for the change in return type
	of ssa_coombine.  Call replace_rhs_after_ssa_combine.

2012-02-28  Andrew Pinski  <apinski@cavium.com>

	* gimple-ssa-combine.c (nonzerobits_report): New function
	to report when we find a non "-1" from nonzerobits.
	(nonzerobits): Use nonzerobits_report.
	Handle CASE_CONVERT.
	(forward_propagate_into_gimple_cond): Handle proping
	of ~a into if(a!=0).
	Handle the case where we did a simplification from a!=0
	to a.

2012-02-27  Andrew Pinski  <apinski@cavium.com>

	* gimple-ssa-combine.c (mask_for_type): New function.
	(gimple_default_nonzero_bits): Return -1 in the unsigned
	type of val.
	(nonzerobits_1): Remove.
	(nonzerobits): Rewrite using defcode_for_name_3.
	Also ask the hook before using defcode_for_name_3.
	(defcodefor_name): Rename to ...
	(defcodefor_name_3): this.
	Use extract_ops_from_tree_1 instead of doing it manually.
	(truth_valued_ssa_name): Move to right below combine_cond_expr_cond.
	Also use nonzerobits.
	(simplify_bitwise_binary): Simplify XOR to IOR if the two sides
	shares no set bits in common.
	Canonicalize (a & C1) | C2.

2012-02-26  Andrew Pinski  <apinski@cavium.com>

	* gimple-ssa-combine.c: Remove the _loc from the functions name
	as all functions take a location.
	(gimple_combine_ternary): Export.
	(gimple_combine_binary): Likewise.
	(gimple_combine_unary): Likewise.
	* tree-flow.h (gimple_combine_binary): New prototype.
	(gimple_combine_unary): Likewise.
	(gimple_combine_ternary): Likewise.
	* tree-vrp.c (extract_range_from_cond_expr): Move below
	extract_range_from_comparison.
	Try to reduce the comparison and don't do a merge if it
	does reduce.
	(extract_range_from_assignment): Call gimple_combine_binary/
	gimple_combine_ternary/gimple_combine_unary on the expression
	before trying to extract the range.

2012-02-26  Andrew Pinski  <apinski@cavium.com>

	* gimple-ssa-combine.c (forward_propagate_into_comparison_1):
	If we got a NOT when trying to fold a==0 then ignore it
	as it is not simplified at all.
	(forward_propagate_into_comparison): Fix a bug when returning
	early and reversed_edges is true.
	(forward_propagate_into_cond): Simplify bool==0?a:b and
	bool!=1?a:b to bool?b:a.
	If we had a = ~b; a?c:d then fold try to fold it as
	a = b==0; a?c:d;

2012-02-26  Andrew Pinski  <apinski@cavium.com>

	* gimple-ssa-combine.c (forward_propagate_into_comparison_1):
	Try to simplify (a|b)==0 as a==0&b==0.

2012-02-26  Andrew Pinski  <apinski@cavium.com>

	* gimple-ssa-combine.c (forward_propagate_into_comparison):
	Fix a bug when returning early.

2012-02-25  Andrew Pinski  <apinski@cavium.com>

	* gimple-ssa-combine.c (simplify_gimple_switch): Convert over
	to using defcodefor_name.  Also loop over the ssa_name.
	(truth_valued_ssa_name): Use defcodefor_name.
	(lookup_logical_inverted_value): Likewise.

2012-02-25  Andrew Pinski  <apinski@cavium.com>

	* gimple-ssa-combine.c: Remove nonzerobits_t argument from
	all the functions and update the function calls.
	(gimple_default_nonzero_bits): New function.
	(gimple_default_nonzero_bits): New static variable.
	(gimple_combine_set_nonzerobits): New function.
	* tree-flow.h (gimple_combine_set_nonzerobits): New prototype.
	(ssa_combine): Remove nonzerobits_t argument.
	* tree-ssa-forwprop.c (forward_prop_nonzero): Remove.
	(ssa_forward_propagate_and_combine): Update call to
	ssa_combine.
	* tree-vrp.c (simplify_stmt_using_ranges): Update call
	to ssa_combine.
	(execute_vrp): Call gimple_combine_set_nonzerobits twice;
	setting up the nonzerobits hook for VRP and removing it.

2012-02-24  Andrew Pinski  <apinski@cavium.com>

	* gimple-ssa-combine.c (associate_plusminus): Move
	over to use defcodefor_name/defcodefor_name; simplifies
	the code a bit.

2012-02-24  Andrew Pinski  <apinski@cavium.com>

	* gimple-ssa-combin.c (forward_propagate_into_cond):
	Simplify 'A?1:0' to '(type)A'.
	Simplify 'A?0:1' to '(type)!A'.
	(combine_conversions): Use defcodefor_name.

2012-02-23  Andrew Pinski  <apinski@cavium.com>

	* gimple-ssa-combine.c (simplify_bitwise_binary): Fix
	simplifing of a!=0|b!=0 for non integer types.
	Add simplifing of a==0&b==0 to (a|b)==0.

2012-02-23  Andrew Pinski  <apinski@cavium.com>

	* tree-ssa-fold.c: Rename to ...
	* gimple-ssa-combine.c: This.
	Do s/gimple_fold/gimple_combine/ replacement.
	(nonzerobits_1): Use truth_value_p instead of
	checking just for tcc_comparison.
	(forward_propagate_into_comparison_1): Add a comment in
	front of the simplification of "(a|b)!=0" to "a!=0|b!=0".
	(truth_valued_ssa_name): Add a FIXME comment about using nonzerobits.
	* Makefile.in (OBJS): Replace tree-ssa-fold.o with
	gimple-ssa-combine.o.
	(tree-ssa-fold.o): Rename to ...
	(gimple-ssa-combine.o): This.  Add tree-ssa-propagate.h.

2012-02-23  Andrew Pinski  <apinski@cavium.com>

	* tree-ssa-forwprop.c (get_prop_dest_stmt): Remove.
	(remove_prop_source_from_use): Remove.
	* tree-ssa-fold.c (forward_propagate_into_gimple_cond):
	If we used the first operand for proping, then
	prop the comparison into the GIMPLE_COND.
	(forward_propagate_into_cond): Likewise for the COND_EXPR.

2012-02-22  Andrew Pinski  <apinski@cavium.com>

	* tree-ssa-forwprop.c (forward_propagate_addr_expr): Remove.
	(ssa_forward_propagate_and_combine): Don't call
	forward_propagate_addr_expr.

2012-02-22  Andrew Pinski  <apinski@cavium.com>

	* tree-ssa-fold.c (simplify_not_neg_abs_expr): Fix typo
	for the ~(a CMP b) simplifier.

2012-02-22  Andrew Pinski  <apinski@cavium.com>

	* tree-ssa-fold.c (forward_propagate_into_comparison_1): Fix
	formatting.
	(forward_propagate_into_gimple_cond): If we have != 0 and the
	comparison type is bool, then use defcodefor_name to get the
	conditional.
	(forward_propagate_into_cond): Use defcodefor_name to get the
	condition.
	(simplify_not_neg_expr): Rename to ...
	(simplify_not_neg_abs_expr): this.
	Simplify ABS (ABS (a)) -> ABS (a).
	Simplify ABS (-a) -> ABS (a).
	Simplify ~ (-a) -> a - 1.
	Simplify - (~a) -> a + 1
	Simplify ~ (X ^ C) for C constant is X ^ ~C.
	Simplify ~ (a CMP b) to be using the inverted comparison if there is one.
	(associate_plusminus): Add a comment about using defcodefor_name.
	(gimple_fold_unary_loc): Handle ABS_EXPR.

2012-02-22  Andrew Pinski  <apinski@cavium.com>

	* tree-ssa-fold.c (defcodefor_name): Move to right below
	can_propagate_from.  Handle more than SSA_NAMES like
	real expressions.
	(forward_propagate_into_comparison_1): Use defcodefor_name
	for the folding of "(a|b)!=0", simplifies the code a lot.
	(simplify_not_neg_expr): Use defcodefor_name.  Simplifies
	the code a lot.
	(simplify_bitwise_binary): Call defcodefor_name for every
	kind of tree.  Simplifies the code a lot.

2012-02-22  Andrew Pinski  <apinski@cavium.com>

	* tree-ssa-fold.c (gimple_fold_build3_loc): New function.
	(forward_propagate_into_comparison_1): Handle the case where
	the op0 is not a SSA_NAME for the (a|b)!=0 folding.
	(forward_propagate_into_gimple_cond): Reindent.
	(forward_propagate_into_cond): Take a loc,
	code, a type and operands instead of a gimple_stmt_iterator.
	Also call gimple_fold_build3_loc instead of build3.
	(gimple_fold_ternary_loc): New function.
	(ssa_combine): Call gimple_fold_ternary_loc.
	Don't call forward_propagate_into_cond.

2012-02-22  Andrew Pinski  <apinski@cavium.com>

	PR tree-opt/52345
	* tree-ssa-fold.c (forward_propagate_into_comparison_1): 
	Add nonzerobitsp argument.
	Try to simplify "(a|b)!=0 to a!=0 | b!=0" if either a!=0 or b!=0
	simplifies.
	(simplify_bitwise_binary): Fold "a!=0|b!=0" into (a|b)!=0
	if a and b are the same type.

2012-02-22  Andrew Pinski  <apinski@cavium.com>

	* tree-ssa-fold.c: Include tree-ssa-propagate.h.
	(forward_propagate_into_gimple_cond): Update call to
	extract_simple_gimple.
	(forward_propagate_into_cond): Return tree instead of bool.
	(valid_simple_gimple): Remove.
	(build_simple_gimple): Remove.
	(extract_simple_gimple): Remove loc argument.
	Use valid_gimple_rhs_p instead of valid_simple_gimple.
	Use force_gimple_operand_gsi instead of build_simple_gimple.
	Handle COND_EXPR also.
	(ssa_combine): Handle the new return type of
	forward_propagate_into_cond.
	Update call to extract_simple_gimple.

2012-02-22  Andrew Pinski  <apinski@cavium.com>

	* tree-ssa-fold.c (associate_plusminus): Take a loc,
	code, a type and operands instead of a gimple_stmt_iterator.
	(gimple_fold_binary_loc): Call associate_plusminus for
	MINUS_EXPR and PLUS_EXPR.
	(ssa_combine): Remove the call to associate_plusminus
	since it is handled by gimple_fold_binary_loc now.

2012-02-21  Andrew Pinski  <apinski@cavium.com>

	* tree-ssa-fold.c (associate_plusminus): Return a tree
	and add nonzerobitsp as an argument.
	Don't modify the statement.  Also don't loop as that
	will be taken care of.  Return the simplified tree.
	(ssa_combine): Update call to associate_plusminus.

2012-02-21  Andrew Pinski  <apinski@cavium.com>

	* tree-ssa-fold.c (expand_possible_comparison): Delete.
	(forward_propagate_into_cond): Add nonzerobits argument.
	Call gimple_fold_binary_loc instead of looping on
	forward_propagate_into_comparison_1.
	Clean up the code after calling gimple_fold_binary_loc.
	(ssa_combine): Update call to forward_propagate_into_cond.

2012-02-21  Andrew Pinski  <apinski@cavium.com>

	* tree-ssa-fold.c (constant_pointer_difference): Move back to
	tree-ssa-forwprop.c.
	(simplify_builtin_call): Likewise.
	(ssa_combine): Don't call simplify_builtin_call.
	* tree-ssa-forwprop.c (constant_pointer_difference): Moved back
	from tree-ssa-fold.c
	(simplify_builtin_call): Likewise.
	(ssa_forward_propagate_and_combine): Before calling ssa_combine,
	call simplify_builtin_call and also don't call gsi_next if
	simplify_builtin_call did something.

2012-02-21  Andrew Pinski  <apinski@cavium.com>

	* tree-ssa-fold.c (combine_cond_expr_cond): Strip off
	all conversions from bool to bool types and not just the
	useless ones.
	(forward_propagate_into_comparison): Ignore the type conversions
	inside the loop.
	Convert the type of the returned expression to type.
	(forward_propagate_into_gimple_cond): Strip off all
	conversions from bool to bool types as GIMPLE_COND
	does care what type of bool it takes.

2012-02-20  Andrew Pinski  <apinski@cavium.com>

	* tree-ssa-fold.c (combine_cond_expr_cond): Strip off
	the useless type conversions after fold_binary.
	Check to see if we change from (A) != 0 to just A if A
	is not a comparison or a ssa_name.
	(forward_propagate_into_comparison): Use build1 instead
	of fold_build1.
	(forward_propagate_into_gimple_cond): Take a nonzerobits_t also.
	Cleanup and use gimple_fold_binary_loc instead of doing calling
	forward_propagate_into_comparison_1/expand_possible_comparison.
	(ssa_combine): Update call to forward_propagate_into_gimple_cond.

2012-02-20  Andrew Pinski  <apinski@cavium.com>

	* fold-const.c (fold_undefer_overflow_warnings): Don't
	use return of a void function.

2012-02-20  Andrew Pinski  <apinski@cavium.com>

	* tree-ssa-fold.c (forward_propagate_into_comparison): Take a loc,
	code, a type and an operand instead of a gimple_stmt_iterator.
	(gimple_fold_binary_loc): Call forward_propagate_into_comparison
	for tcc_comparison code class.
	(ssa_combine): Remove special handling of tcc_comparison as
	gimple_fold_binary_loc handles it.

2012-02-20  Andrew Pinski  <apinski@cavium.com>

	* tree.c (save_expr): Don't wrap a SSA_NAME with a save_expr.
	* tree-ssa-fold.c (forward_propagate_into_comparison): Change
	how we handle the looping.  Don't expand the comparison
	instead return if the new expression if canonicalize_cond_expr_cond
	returns NULL.

2012-02-19  Andrew Pinski  <apinski@cavium.com>

	* tree-ssa-fold.c (forward_propagate_into_comparison): Return tree
	instead of bool.
	(ssa_combine): Handle the return type change of
	forward_propagate_into_comparison.

2012-02-18  Andrew Pinski  <apinski@cavium.com>

	* fold-const.c (fold_undefer_overflow_warnings): Split out into ...
	(fold_undefer_overflow_warnings_loc): this.
	* tree.h (fold_undefer_overflow_warnings_loc): Prototype.
	* tree-ssa-fold.c (combine_cond_expr_cond): Change argument stmt for
	a location and a nowarnings bool.
	(forward_propagate_into_comparison_1): Change argument stmt for a
	location and a nowarnings bool.
	Update call to combine_cond_expr_cond.
	(forward_propagate_into_comparison): Update call to
	forward_propagate_into_comparison_1.
	(forward_propagate_into_gimple_cond): Likewise.
	(forward_propagate_into_cond): Likewise.

2012-02-18  Andrew Pinski  <apinski@cavium.com>

	* tree-ssa-fold.c (combine_conversions): Fix creation of the new tree.
	Use the original code instead of NOP_EXPR.

2012-02-18  Andrew Pinski  <apinski@cavium.com>

	* tree-ssa-fold.c (simplify_not_neg_expr): Take a loc, code, a type
	and an operand instead of a gimple_stmt_iterator.
	(gimple_fold_unary_loc): Call simplify_not_neg_expr.
	(ssa_combine): Remove call to simplify_not_neg_expr since that is already
	handled by gimple_fold_unary_loc.

2012-02-18  Andrew Pinski  <apinski@cavium.com>

	* tree-ssa-fold.c (gimple_fold_build2_loc): Fix formating.
	(gimple_fold_build1_loc): Likewise.
	(nonzerobits_1): New function.
	(nonzerobits): New function.
	(simplify_bitwise_binary): Use nonzerobits instead of calling
	argument directly.
	* tree-ssa-forwprop.c (forward_prop_nonzero): Just return
	double_int_minus_one as the generic function now handles the heavy
	lifting.

2012-02-17  Andrew Pinski  <apinski@cavium.com>

	* tree-ssa-fold.c (combine_conversions): Take a loc, code, a type
	and an operand instead of a gimple_stmt_iterator.
	Return a tree of the simplified tree, calling gimple_fold_build1_loc
	if needed.
	(gimple_fold_binary_loc): Move to right above ssa_combine.
	(gimple_fold_unary_loc): Likewise.
	Call combine_conversions for conversions.
	(ssa_combine): Remove call to combine_conversions since that is
	handled by gimple_fold_unary_loc now.

2012-02-17  Andrew Pinski  <apinski@cavium.com>

	* tree-ssa-fold.c (gimple_fold_build2_loc): New function.
	(gimple_fold_build1_loc): New function.
	(simplify_bitwise_binary_1): Even if fold_stmt will handle them,
	handle them here so we can reduce the number of temps that might
	be used.
	(simplify_bitwise_binary_2): Rename back to simplify_bitwise_binary.
	Take location and type instead of gimple_stmt_iterator.
	Use gimple_fold_build2 instead of simplify_bitwise_binary_3/build2.
	Use gimple_fold_build1 instead of build1 in some cases.
	(simplify_bitwise_binary_3): Remove.
	(gimple_fold_binary_loc): New function.
	(gimple_fold_unary_loc): New function.
	(combine_conversions): Use gimple_fold_build2_loc instead of
	simplify_bitwise_binary_3.
	(ssa_combine): Call gimple_fold_binary_loc/gimple_fold_unary_loc.
	Remove special casing of the bitwise operator as those are now handled
	via gimple_fold_binary_loc.

2012-02-17  Andrew Pinski  <apinski@cavium.com>

	* tree-ssa-fold.c (simplify_bitwise_binary_2): Fix typo
	in handling non SSA_NAMEs for arg2.
	Use simplify_bitwise_binary_3 instead of build2 to fold more.
	(combine_conversions): Take nonzerobits_t.
	Replace explict usage of TREE_TYPE (lhs) with a preloaded variable.
	Use simplify_bitwise_binary_3 instead of fold_build2.
	(ssa_combine): Update call to combine_conversions.

2012-02-17  Andrew Pinski  <apinski@cavium.com>

	* tree-ssa-fold.c (simplify_bitwise_binary_2): Set
	def1_arg1/def1_arg2/def2_arg1/def2_arg2 for non SSA_NAME case.
	Replace calls to fold_build2/fold_build1 with build2/build1 since
	fold will unfold the simplified trees.
	Call simplify_bitwise_binary_3 in the cases where we can if we are
	returning a newly created bitwise tree.

2012-02-17  Andrew Pinski  <apinski@cavium.com>

	* tree-ssa-fold.c (valid_simple_gimple): New function.
	(build_simple_gimple): New function.
	(extract_simple_gimple): New function.
	(defcodefor_name): Set *code, *arg1, *arg2 even if there
	is no definition.
	(simplify_bitwise_binary): Return tree type and split out to ...
	(simplify_bitwise_binary_2): This. Instead of updating the statement,
	return a tree which contains the simplified expression.
	Also call simplify_bitwise_binary_3 if we want to do some recursion.
	(simplify_bitwise_binary_3): New function.
	(ssa_combine): Handle simplify_bitwise_binary returning a tree.
	Expanding the tree if needed.

2012-02-17  Andrew Pinski  <apinski@cavium.com>

	* tree-ssa-forwprop.c (delete_dead_code_uptil): Take a
	gimple_stmt_iterator instead.  Reverse the order
	of the statement walk and start at the previous
	instruction of UNTIL instead.
	(ssa_forward_propagate_and_combine): Update call to
	delete_dead_code_uptil.

2012-02-16  Andrew Pinski  <apinski@cavium.com>

	* tree-ssa-ccp.c (ccp_finalize): Fix extra ;.
	* tree-ssa-fold.c (simplify_bitwise_binary):
	Fold BIT_AND_EXPR based on nonzero bits.
	Fold BIT_IOR_EXPR based on nonzero bits.
	* tree-ssa-forwporp.c (forward_prop_nonzero):
	Add a simple calucation of the zero bits
	based on the definition of the ssa_name.

2012-02-16  Andrew Pinski  <apinski@cavium.com>

	* tree-ssa-fold.c (expand_possible_comparison): Add reversed_edges
	argument.
	Set *reversed_edges argument if we had TRUTH_NOT_EXPR or BIT_NOT_EXPR
	and strip off the TRUTH_NOT_EXPR and BIT_NOT_EXPR.
	(forward_propagate_into_comparison): Loop around on
	forward_propagate_into_comparison_1 and expand_possible_comparison.
	Allow for reversed_edges only with ssa_name.
	(forward_propagate_into_comparison): Loop around on
	forward_propagate_into_comparison_1 and expand_possible_comparison.
	Deal with reversed_edges.
	(forward_propagate_into_cond): Loop around on
	forward_propagate_into_comparison_1 and expand_possible_comparison.
	* tree-ssa-forwprop.c (delete_dead_code_uptil): New function.
	(ssa_forward_propagate_and_combine): Print out more debugging info
	in the dump.
	Also delete dead code if ssa_combine did something.

2012-02-15  Andrew Pinski  <apinski@cavium.com>

	* tree-flow.h (ssa_combine): Make return value bool.
	* tree-ssa-fold.c (remove_prop_source_from_use): Delete.
	(forward_propagate_into_comparison): Make return value bool.
	Allow the other passes remove the dead code.
	(forward_propagate_into_cond): Boolize.
	(forward_propagate_into_gimple_cond): Make return value bool.
	Allow the other passes remove the dead code.
	(combine_conversions): Likewise.
	(ssa_combine): Make return value bool.
	Remove logic that returned 1 vs 2.
	* tree-ssa-forwprop.c (ssa_forward_propagate_and_combine):
	Change to run cfgcleanup if ssa_combine just returns nonzero.

2012-02-15  Andrew Pinski  <apinski@cavium.com>

	* tree-ssa-forwprop.c (forward_prop_nonzero): New function.
	(ssa_forward_propagate_and_combine): Pass forward_prop_nonzero
	to ssa_combine.
	* tree-ssa-fold.c (simplify_bitwise_binary): nonzerobitsp will never
	be non NULL.

2012-02-15  Andrew Pinski  <apinski@cavium.com>

	* tree-vrp.c (remove_range_assertions): Use gimple_debug_bind_p
	instead of is_gimple_debug.  Also check gimple_debug_bind_get_value
	before checking the tree code.

2012-02-14  Andrew Pinski  <apinski@cavium.com>

	* tree-flow.h (nonzerobits_t): New type.
	(ssa_combine): Add nonzerobits_t argument.
	* tree-ssa-fold.c (simplify_bitwise_binary): Add
	nonzerobitsp argument.
	Fold ~X & N into X ^ N if X's nonzerobits are the same as N.
	(ssa_combine): Add nonzerobitsp argument.
	Update call to simplify_bitwise_binary.
	* tree-ssa-forwprop.c (ssa_forward_propagate_and_combine):
	Update call to ssa_combine.
	* tree-vrp.c (remove_range_assertions): Remove asserts from
	gimple debug also.
	(vrp_nonzerop): New function.
	(simplify_stmt_using_ranges): Call ssa_combine before doing any
	other simplification.

2012-02-14  Andrew Pinski  <apinski@cavium.com>

	* tree-ssa-fold.c (simplify_bitwise_binary): Add fold of "(X ^ Y) & Y"
	as "~X & Y".

2012-02-14  Andrew Pinski  <apinski@cavium.com>

	* tree-ssa-fold.c (simplify_bitwise_binary): Initialize def1_arg2
	and def2_arg2 to NULL.

2012-02-14  Andrew Pinski  <apinski@cavium.com>

	* tree-ssa-forwprop.c: Split the combing functions out into ...
	* tree-ssa-fold.c: this.
	* Makefile.in (OBJS): Add tree-ssa-fold.o.
	(tree-ssa-fold.o): New file.

2012-02-13  Andrew Pinski  <apinski@cavium.com>

	* tree-ssa-forwprop.c (simplify_bitwise_binary): Fix merge of the
	last two patches.

2012-02-13  Andrew Pinski  <apinski@cavium.com>

	* fold-const.c (fold_comparison): Handle ((CAST)~X).
	* tree-ssa-forwprop.c (combine_cond_expr_cond): Swap operands so
	that fold_binary_loc would not return a non-folded tree.
	Don't call canonicalize_cond_expr_cond.
	(forward_propagate_into_comparison_1): Also try combine casts into the
	comparisons.
	(expand_possible_comparison): New function.
	(forward_propagate_into_comparison): Call expand_possible_comparison.
	(forward_propagate_into_gimple_cond): Take also a gsi.
	Call expand_possible_comparison.
	(forward_propagate_into_cond): Call expand_possible_comparison.
	(ssa_forward_propagate_and_combine): Update call to
	forward_propagate_into_gimple_cond.

2012-02-13  Andrew Pinski  <apinski@cavium.com>

	PR middle-end/33512
	* tree-ssa-forwprop.c (defcodefor_name): New function.
	(simplify_bitwise_binary): Use defcodefor_name.
	Simplify "( X | Y) & X" to X and "( X & Y) | X" to X.
	Simplify "(~X | Y) & X" to "X & Y" and
	"(~X & Y) | X" to "X | Y".

2012-02-13  Andrew Pinski  <apinski@cavium.com>

	* tree-ssa-forwprop.c (simplify_bitwise_binary): Assert that we have
	AND/XOR or IOR.
	Fold "(A OP1 B) OP0 (C OP1 B)" to "(A OP0 C) OP1 B".


Copyright (C) 2012 Free Software Foundation, Inc.

Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.

