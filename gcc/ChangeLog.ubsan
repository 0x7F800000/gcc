2013-08-28  Marek Polacek  <polacek@redhat.com>

	* Makefile.in (ubsan.o): Add pointer-set.h dependency.  Remove
	alloc-pool.h and HASH_TABLE_H dependencies.

2013-08-27  Marek Polacek  <polacek@redhat.com>

	* ubsan.c: Use pointer map instead of hash table.

2013-08-26  Marek Polacek  <polacek@redhat.com>

	* tree.h (enum tree_index): Add TI_POINTER_SIZED_TYPE.
	(pointer_sized_int_node): Define.
	* tree.c (build_common_tree_nodes): Initialize
	pointer_sized_int_node.
	* ubsan.c (ubsan_encode_value): Use pointer_sized_int_node instead
	calling uptr_type.
	(uptr_type): Remove function.
	* asan.c (asan_global_struct): Use pointer_sized_int_node instead
	calling build_nonstandard_integer_type.
	(initialize_sanitizer_builtins): Likewise.
	(asan_finish_file): Likewise.

2013-08-23  Marek Polacek  <polacek@redhat.com>

	* ubsan.c (ubsan_typedesc_hasher::hash): Hash the TYPE_UID of the
	type.
	(ubsan_type_descriptor): Get TYPE_MAIN_VARIANT before initializing
	the type descriptor.

2013-08-20  Marek Polacek  <polacek@redhat.com>

	* ubsan.c (is_ubsan_builtin_p): New function.
	* ubsan.h: Declare it.

2013-08-05  Marek Polacek  <polacek@redhat.com>

	* ubsan.c (ubsan_source_location_type): Properly create
	const char type using build_qualified_type.

2013-07-31  Marek Polacek  <polacek@redhat.com>

	* doc/invoke.texi: Improve documentation of -fsanitize=undefined.

2013-07-30  Marek Polacek  <polacek@redhat.com>

	* config/rs6000/rs6000.h (FRAME_GROWS_DOWNWARD): Use flag_sanitize
	instead of flag_asan.

2013-07-30  Marek Polacek  <polacek@redhat.com>

	* ubsan.c (ubsan_source_location): Use build_constructor_va
	instead of build_constructor.
	(ubsan_type_descriptor): Likewise.

2013-07-29  Marek Polacek  <polacek@redhat.com>

	* common.opt (static-libubsan): New option.
	* doc/invoke.texi: Document -static-libubsan.

2013-07-24  Marek Polacek  <polacek@redhat.com>

	* ubsan.c (struct ubsan_typedesc): Improve comment.

2013-07-21  Marek Polacek  <polacek@redhat.com>

	* ubsan.c (struct ubsan_typedesc): Add comments.
	(ubsan_typedesc_hasher::hash): Don't hash the VAR_DECL element.
	(ubsan_typedesc_hasher::equal): Adjust comment.
	(ubsan_typedesc_get_alloc_pool): Remove comment.
	(empty_ubsan_typedesc_hash_table): Remove function.
	(ubsan_source_location_type): Remove bogus comment.
	(get_tinfo_for_type): Remove function.
	(get_ubsan_type_info_for_type): New function.
	(ubsan_type_descriptor): Use ASM_GENERATE_INTERNAL_LABEL instead of
	ASM_FORMAT_PRIVATE_NAME.  Use TYPE_MAIN_VARIANT of the type.
	(ubsan_create_data): Likewise.

2013-07-15  Marek Polacek  <polacek@redhat.com>

	* gcc.c (ADD_STATIC_LIBUBSAN_LIBS): Define.
	(LIBUBSAN_SPEC): Likewise.
	(LIBUBSAN_EARLY_SPEC): Likewise.
	(SANITIZER_SPEC): Handle libubsan.
	(SANITIZER_EARLY_SPEC): Likewise.

2013-07-15  Marek Polacek  <polacek@redhat.com>

	* builtin-attrs.def (ATTR_COLD_NOTHROW_LEAF_LIST): Define.
	* sanitizer.def (BUILT_IN_UBSAN_HANDLE_DIVREM_OVERFLOW): Don't mark
	as NORETURN.
	(BUILT_IN_UBSAN_HANDLE_SHIFT_OUT_OF_BOUNDS): Likewise.
	* asan.c (ATTR_COLD_NOTHROW_LEAF_LIST): Define.

2013-07-14  Marek Polacek  <polacek@redhat.com>

	* opts.c (common_handle_option): Add -fsanitize=unreachable option.
	* builtins.c (fold_builtin_0): Use SANITIZE_UNREACHABLE instead of
	SANITIZE_UNDEFINED.
	* flag-types.h (enum sanitize_code): Add SANITIZE_UNREACHABLE.

2013-07-14  Marek Polacek  <polacek@redhat.com>

	* Makefile.in (c-family/c-ubsan.o): Add alloc-pool.h, CGRAPH_H,
	GIMPLE_H, HASH_TABLE_H, output.h, toplev.h and ubsan.h dependencies.
	(builtins.o): Add ubsan.h dependency.

2013-07-14  Marek Polacek  <polacek@redhat.com>

	* builtins.c: Include ubsan.h.
	(fold_builtin_0): Instrument __builtin_unreachable.
	* sanitizer.def (BUILT_IN_UBSAN_HANDLE_BUILTIN_UNREACHABLE): Define.
	* Makefile.in: Add ubsan.c.
	* ubsan.h: New file.
	* ubsan.c: New file.

2013-07-14  Jakub Jelinek  <jakub@redhat.com>

	* gcc.c: Document %{%:function(args):X}.
	(SANITIZER_EARLY_SPEC, SANITIZER_SPEC): Use %:sanitize(address)
	instead of fsanitize=address and %:sanitize(thread) instead of
	fsanitize=thread.
	(static_spec_functions): Add sanitize.
	(handle_spec_function): Add retval_nonnull argument and if non-NULL,
	store funcval != NULL there.
	(do_spec_1): Adjust handle_spec_function caller.
	(handle_braces): Allow %:function(args) as condition.
	(sanitize_spec_function): New function.
	* common.opt (fsanitize=): Add Driver.
	* config/darwin.h (LINK_COMMAND_SPEC_A): Use %:sanitize(address)
	instead of fsanitize=address.
	* config/arm/linux-eabi.h (ASAN_CC1_SPEC): Use %:sanitize(address)
	instead of fsanitize=address*.

2013-07-14  Marek Polacek  <polacek@redhat.com>

	* common.opt (flag_sanitize): Add variable.
	(fsanitize=): Add option.
	(fsanitize=thread): Remove option.
	(fsanitize=address): Likewise.
	* flag-types.h (sanitize_code): New enum.
	* opts.c (common_handle_option): Parse command line arguments
	of -fsanitize=.
	* varasm.c (get_variable_section): Adjust.
	(assemble_noswitch_variable): Likewise.
	(assemble_variable): Likewise.
	(output_constant_def_contents): Likewise.
	(categorize_decl_for_section): Likewise.
	(place_block_symbol): Likewise.
	(output_object_block): Likewise.
	* builtins.def: Likewise.
	* toplev.c (compile_file): Likewise.
	(process_options): Likewise.
	* cppbuiltin.c: Likewise.
	* tsan.c (tsan_pass): Likewise.
	(tsan_gate): Likewise.
	(tsan_gate_O0): Likewise.
	* cfgexpand.c (partition_stack_vars): Likewise.
	(expand_stack_vars): Likewise.
	(defer_stack_allocation): Likewise.
	(expand_used_vars): Likewise.
	* cfgcleanup.c (old_insns_match_p): Likewise.
	* asan.c (asan_finish_file): Likewise.
	(asan_instrument): Likewise.
	(gate_asan): Likewise.

2013-07-05  Marek Polacek  <polacek@redhat.com>

	* Makefile.in: Add ubsan.c.
	* common.opt: Add -fsanitize=undefined option.
	* doc/invoke.texi: Document the new flag.
	* sanitizer.def (DEF_SANITIZER_BUILTIN): Define.
	* builtin-attrs.def (ATTR_COLD): Define.
	* asan.c (initialize_sanitizer_builtins): Build
	BT_FN_VOID_PTR_PTR_PTR.
	* builtins.def (BUILT_IN_UBSAN_HANDLE_DIVREM_OVERFLOW,
	BUILT_IN_UBSAN_HANDLE_SHIFT_OUT_OF_BOUNDS): Define.
